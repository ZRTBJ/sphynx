{"version":3,"sources":["components/Links/index.tsx","hooks/useDebouncedChangeHandler.ts","state/burn/hooks.ts","views/RemoveLiquidity/index.tsx"],"names":["StyledInternalLink","styled","Link","theme","colors","primary","useDebouncedChangeHandler","value","onChange","debouncedMs","useState","inner","setInner","timer","useRef","onChangeInner","useCallback","newValue","current","clearTimeout","setTimeout","undefined","useEffect","useBurnState","useSelector","state","burn","useDerivedBurnInfo","currencyA","currencyB","useActiveWeb3React","account","chainId","independentField","typedValue","usePair","pair","relevantTokenBalances","useTokenBalances","liquidityToken","userLiquidity","address","wrappedCurrency","tokenA","tokenB","tokens","Field","CURRENCY_A","CURRENCY_B","LIQUIDITY","totalSupply","useTotalSupply","liquidityValueA","JSBI","greaterThanOrEqual","raw","TokenAmount","getLiquidityValue","liquidityValueB","liquidityValues","percentToRemove","Percent","LIQUIDITY_PERCENT","independentAmount","tryParseAmount","greaterThan","liquidityValue","error","parsedAmounts","token","multiply","quotient","useBurnActionHandlers","dispatch","useDispatch","onUserInput","field","typeInput","BorderCard","div","cardBorder","RemoveLiquidity","history","match","params","currencyIdA","currencyIdB","useCurrency","library","routerType","useSetRouterType","useMemo","t","useTranslation","_onUserInput","isValid","showDetailed","setShowDetailed","attemptingTxn","setAttemptingTxn","txHash","setTxHash","deadline","useTransactionDeadline","useUserSlippageTolerance","allowedSlippage","formattedAmounts","equalTo","lessThan","toFixed","toSignificant","atMaxAmount","pairContract","usePairContract","routerAddress","useRouterAddress","signatureData","setSignatureData","useApproveCallback","approval","approveCallback","a","Error","liquidityAmount","nonces","nonce","EIP712Domain","name","type","domain","RouterType","sphynx","version","verifyingContract","Permit","message","owner","spender","toString","toHexString","toNumber","data","JSON","stringify","types","primaryType","send","then","splitSignature","signature","v","r","s","catch","err","code","onLiquidityInput","onCurrencyAInput","onCurrencyBInput","addTransaction","useTransactionAdder","currencyAmountA","currencyAmountB","router","getRouterContract","calculateSlippageAmount","amountsMin","currencyBIsETH","ETHER","oneCurrencyIsETH","ApprovalState","APPROVED","methodNames","args","Promise","all","map","methodName","estimateGas","calculateGasMargin","console","safeGasEstimates","indexOfSuccessfulEstimation","findIndex","safeGasEstimate","BigNumber","isBigNumber","gasLimit","response","summary","symbol","hash","modalBottom","assetA","assetB","currency0","currency1","margin","priceOf","disabled","onClick","onRemove","pendingText","amountA","symbolA","amountB","symbolB","liquidityPercentChangeCallback","oneCurrencyIsWETH","Boolean","currencyEquals","WETH","handleSelectCurrencyA","currency","currencyId","push","handleSelectCurrencyB","handleDismissConfirmation","Number","parseInt","innerLiquidityPercentage","setInnerLiquidityPercentage","useModal","title","customOnDismiss","content","topContent","gap","align","fontSize","size","ml","width","small","textAlign","pt","slippage","modalHeader","bottomContent","onPresentRemoveLiquidity","backTo","subtitle","noConfig","variant","scale","bold","mb","style","lineHeight","min","max","onValueChanged","Math","ceil","flexWrap","justifyContent","color","my","textTransform","id","to","onMax","showMaxButton","disableCurrencySelect","onCurrencySelect","hideBalance","label","marginTop","position","mt","onAttemptToApprove","NOT_APPROVED","mr","PENDING","minWidth","maxWidth","showUnwrapped"],"mappings":"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","file":"static/js/13.7505ea9d.chunk.js","sourcesContent":["import { Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\n\r\n// An internal link from the react-router-dom library that is correctly styled\r\nconst StyledInternalLink = styled(Link)`\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  font-weight: 500;\r\n\r\n  :hover {\r\n    text-decoration: underline;\r\n  }\r\n\r\n  :focus {\r\n    outline: none;\r\n    text-decoration: underline;\r\n  }\r\n\r\n  :active {\r\n    text-decoration: none;\r\n  }\r\n`\r\n\r\nexport default StyledInternalLink\r\n","import { useCallback, useEffect, useRef, useState } from 'react'\r\n\r\n/**\r\n * Easy way to debounce the handling of a rapidly changing value, e.g. a changing slider input\r\n * @param value value that is rapidly changing\r\n * @param onChange change handler that should receive the debounced updates to the value\r\n * @param debouncedMs how long we should wait for changes to be applied\r\n */\r\nexport default function useDebouncedChangeHandler<T>(\r\n  value: T,\r\n  onChange: (newValue: T) => void,\r\n  debouncedMs = 100,\r\n): [T, (value: T) => void] {\r\n  const [inner, setInner] = useState<T>(() => value)\r\n  const timer = useRef<ReturnType<typeof setTimeout>>()\r\n\r\n  const onChangeInner = useCallback(\r\n    (newValue: T) => {\r\n      setInner(newValue)\r\n      if (timer.current) {\r\n        clearTimeout(timer.current)\r\n      }\r\n      timer.current = setTimeout(() => {\r\n        onChange(newValue)\r\n        timer.current = undefined\r\n      }, debouncedMs)\r\n    },\r\n    [debouncedMs, onChange],\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (timer.current) {\r\n      clearTimeout(timer.current)\r\n      timer.current = undefined\r\n    }\r\n    setInner(value)\r\n  }, [value])\r\n\r\n  return [inner, onChangeInner]\r\n}\r\n","import { Currency, CurrencyAmount, JSBI, Pair, Percent, TokenAmount } from '@sphynxswap/sdk'\r\nimport { useCallback } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\r\nimport { usePair } from 'hooks/usePairs'\r\nimport useTotalSupply from 'hooks/useTotalSupply'\r\n\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { tryParseAmount } from '../swap/hooks'\r\nimport { useTokenBalances } from '../wallet/hooks'\r\nimport { Field, typeInput } from './actions'\r\n\r\nexport function useBurnState(): AppState['burn'] {\r\n  return useSelector<AppState, AppState['burn']>((state) => state.burn)\r\n}\r\n\r\nexport function useDerivedBurnInfo(\r\n  currencyA: Currency | undefined,\r\n  currencyB: Currency | undefined,\r\n): {\r\n  pair?: Pair | null\r\n  parsedAmounts: {\r\n    [Field.LIQUIDITY_PERCENT]: Percent\r\n    [Field.LIQUIDITY]?: TokenAmount\r\n    [Field.CURRENCY_A]?: CurrencyAmount\r\n    [Field.CURRENCY_B]?: CurrencyAmount\r\n  }\r\n  error?: string\r\n} {\r\n  const { account, chainId } = useActiveWeb3React()\r\n\r\n  const { independentField, typedValue } = useBurnState()\r\n\r\n  // pair + totalsupply\r\n  const [, pair] = usePair(currencyA, currencyB)\r\n\r\n  // balances\r\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken])\r\n  const userLiquidity: undefined | TokenAmount = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\r\n\r\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\r\n  const tokens = {\r\n    [Field.CURRENCY_A]: tokenA,\r\n    [Field.CURRENCY_B]: tokenB,\r\n    [Field.LIQUIDITY]: pair?.liquidityToken,\r\n  }\r\n\r\n  // liquidity values\r\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\r\n  const liquidityValueA =\r\n    pair &&\r\n    totalSupply &&\r\n    userLiquidity &&\r\n    tokenA &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\r\n      ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw)\r\n      : undefined\r\n  const liquidityValueB =\r\n    pair &&\r\n    totalSupply &&\r\n    userLiquidity &&\r\n    tokenB &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\r\n      ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw)\r\n      : undefined\r\n  const liquidityValues: { [Field.CURRENCY_A]?: TokenAmount; [Field.CURRENCY_B]?: TokenAmount } = {\r\n    [Field.CURRENCY_A]: liquidityValueA,\r\n    [Field.CURRENCY_B]: liquidityValueB,\r\n  }\r\n\r\n  let percentToRemove: Percent = new Percent('0', '100')\r\n  // user specified a %\r\n  if (independentField === Field.LIQUIDITY_PERCENT) {\r\n    percentToRemove = new Percent(typedValue, '100')\r\n  }\r\n  // user specified a specific amount of liquidity tokens\r\n  else if (independentField === Field.LIQUIDITY) {\r\n    if (pair?.liquidityToken) {\r\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken)\r\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\r\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw)\r\n      }\r\n    }\r\n  }\r\n  // user specified a specific amount of token a or b\r\n  else if (tokens[independentField]) {\r\n    const independentAmount = tryParseAmount(typedValue, tokens[independentField])\r\n    const liquidityValue = liquidityValues[independentField]\r\n    if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\r\n      percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw)\r\n    }\r\n  }\r\n\r\n  const parsedAmounts: {\r\n    [Field.LIQUIDITY_PERCENT]: Percent\r\n    [Field.LIQUIDITY]?: TokenAmount\r\n    [Field.CURRENCY_A]?: TokenAmount\r\n    [Field.CURRENCY_B]?: TokenAmount\r\n  } = {\r\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\r\n    [Field.LIQUIDITY]:\r\n      userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\r\n        ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient)\r\n        : undefined,\r\n    [Field.CURRENCY_A]:\r\n      tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\r\n        ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient)\r\n        : undefined,\r\n    [Field.CURRENCY_B]:\r\n      tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\r\n        ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient)\r\n        : undefined,\r\n  }\r\n\r\n  let error: string | undefined\r\n  if (!account) {\r\n    error = 'Connect Wallet'\r\n  }\r\n\r\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\r\n    error = error ?? 'Enter an amount'\r\n  }\r\n\r\n  return { pair, parsedAmounts, error }\r\n}\r\n\r\nexport function useBurnActionHandlers(): {\r\n  onUserInput: (field: Field, typedValue: string) => void\r\n} {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const onUserInput = useCallback(\r\n    (field: Field, typedValue: string) => {\r\n      dispatch(typeInput({ field, typedValue }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return {\r\n    onUserInput,\r\n  }\r\n}\r\n","import React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { splitSignature } from '@ethersproject/bytes'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { TransactionResponse } from '@ethersproject/providers'\r\nimport { Currency, currencyEquals, ETHER, Percent, WETH, RouterType } from '@sphynxswap/sdk'\r\nimport { Button, Text, AddIcon, ArrowDownIcon, CardBody, Slider, Box, Flex, useModal } from '@sphynxswap/uikit'\r\nimport { RouteComponentProps } from 'react-router'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\r\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\r\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\r\nimport { MinimalPositionCard } from '../../components/PositionCard'\r\nimport { AppHeader, AppBody } from '../../components/App'\r\nimport { RowBetween, RowFixed } from '../../components/Layout/Row'\r\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\r\nimport { LightGreyCard } from '../../components/Card'\r\n\r\nimport { CurrencyLogo, DoubleCurrencyLogo } from '../../components/Logo'\r\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\r\nimport { useCurrency } from '../../hooks/Tokens'\r\nimport { usePairContract, useRouterAddress } from '../../hooks/useContract'\r\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\r\n\r\nimport { useSetRouterType } from '../../state/application/hooks'\r\nimport { useTransactionAdder } from '../../state/transactions/hooks'\r\nimport StyledInternalLink from '../../components/Links'\r\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils'\r\nimport { currencyId } from '../../utils/currencyId'\r\nimport useDebouncedChangeHandler from '../../hooks/useDebouncedChangeHandler'\r\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\r\nimport { useApproveCallback, ApprovalState } from '../../hooks/useApproveCallback'\r\nimport Dots from '../../components/Loader/Dots'\r\nimport { useBurnActionHandlers, useDerivedBurnInfo, useBurnState } from '../../state/burn/hooks'\r\n\r\nimport { Field } from '../../state/burn/actions'\r\nimport { useUserSlippageTolerance } from '../../state/user/hooks'\r\nimport Page from '../Page'\r\n\r\nconst BorderCard = styled.div`\r\n  border: solid 1px ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: 16px;\r\n  padding: 16px;\r\n`\r\n\r\nexport default function RemoveLiquidity({\r\n  history,\r\n  match: {\r\n    params: { currencyIdA, currencyIdB },\r\n  },\r\n}: RouteComponentProps<{ currencyIdA: string; currencyIdB: string }>) {\r\n  const [currencyA, currencyB] = [useCurrency(currencyIdA) ?? undefined, useCurrency(currencyIdB) ?? undefined]\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n  const { routerType } = useSetRouterType()\r\n\r\n  const [tokenA, tokenB] = useMemo(\r\n    () => [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)],\r\n    [currencyA, currencyB, chainId],\r\n  )\r\n\r\n  const { t } = useTranslation()\r\n\r\n  // burn state\r\n  const { independentField, typedValue } = useBurnState()\r\n  const { pair, parsedAmounts, error } = useDerivedBurnInfo(currencyA ?? undefined, currencyB ?? undefined)\r\n  const { onUserInput: _onUserInput } = useBurnActionHandlers()\r\n  const isValid = !error\r\n\r\n  // modal and loading\r\n  const [showDetailed, setShowDetailed] = useState<boolean>(false)\r\n  const [attemptingTxn, setAttemptingTxn] = useState(false) // clicked confirm\r\n\r\n  // txn values\r\n  const [txHash, setTxHash] = useState<string>('')\r\n  const deadline = useTransactionDeadline()\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  const formattedAmounts = {\r\n    [Field.LIQUIDITY_PERCENT]: parsedAmounts[Field.LIQUIDITY_PERCENT].equalTo('0')\r\n      ? '0'\r\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].lessThan(new Percent('1', '100'))\r\n      ? '<1'\r\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0),\r\n    [Field.LIQUIDITY]:\r\n      independentField === Field.LIQUIDITY ? typedValue : parsedAmounts[Field.LIQUIDITY]?.toSignificant(6) ?? '',\r\n    [Field.CURRENCY_A]:\r\n      independentField === Field.CURRENCY_A ? typedValue : parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\r\n    [Field.CURRENCY_B]:\r\n      independentField === Field.CURRENCY_B ? typedValue : parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  const atMaxAmount = parsedAmounts[Field.LIQUIDITY_PERCENT]?.equalTo(new Percent('1'))\r\n\r\n  // pair contract\r\n  const pairContract: Contract | null = usePairContract(pair?.liquidityToken?.address)\r\n\r\n  const routerAddress = useRouterAddress()\r\n\r\n  // allowance handling\r\n  const [signatureData, setSignatureData] = useState<{ v: number; r: string; s: string; deadline: number } | null>(null)\r\n  const [approval, approveCallback] = useApproveCallback(parsedAmounts[Field.LIQUIDITY], routerAddress)\r\n\r\n  async function onAttemptToApprove() {\r\n    if (!pairContract || !pair || !library || !deadline) throw new Error('missing dependencies')\r\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\r\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\r\n\r\n    // try to gather a signature for permission\r\n    const nonce = await pairContract.nonces(account)\r\n\r\n    const EIP712Domain = [\r\n      { name: 'name', type: 'string' },\r\n      { name: 'version', type: 'string' },\r\n      { name: 'chainId', type: 'uint256' },\r\n      { name: 'verifyingContract', type: 'address' },\r\n    ]\r\n\r\n    let domain\r\n\r\n    if (routerType === RouterType.sphynx) {\r\n      domain = {\r\n        name: 'Sphynx LPs',\r\n        version: '1',\r\n        chainId,\r\n        verifyingContract: pair.liquidityToken.address,\r\n      }\r\n    } else {\r\n      domain = {\r\n        name: 'Pancake LPs',\r\n        version: '1',\r\n        chainId,\r\n        verifyingContract: pair.liquidityToken.address,\r\n      }\r\n    }\r\n\r\n    const Permit = [\r\n      { name: 'owner', type: 'address' },\r\n      { name: 'spender', type: 'address' },\r\n      { name: 'value', type: 'uint256' },\r\n      { name: 'nonce', type: 'uint256' },\r\n      { name: 'deadline', type: 'uint256' },\r\n    ]\r\n    const message = {\r\n      owner: account,\r\n      spender: routerAddress,\r\n      value: liquidityAmount.raw.toString(),\r\n      nonce: nonce.toHexString(),\r\n      deadline: deadline.toNumber(),\r\n    }\r\n    const data = JSON.stringify({\r\n      types: {\r\n        EIP712Domain,\r\n        Permit,\r\n      },\r\n      domain,\r\n      primaryType: 'Permit',\r\n      message,\r\n    })\r\n\r\n    library\r\n      .send('eth_signTypedData_v4', [account, data])\r\n      .then(splitSignature)\r\n      .then((signature) => {\r\n        setSignatureData({\r\n          v: signature.v,\r\n          r: signature.r,\r\n          s: signature.s,\r\n          deadline: deadline.toNumber(),\r\n        })\r\n      })\r\n      .catch((err) => {\r\n        // for all errors other than 4001 (EIP-1193 user rejected request), fall back to manual approve\r\n        if (err?.code !== 4001) {\r\n          approveCallback()\r\n        }\r\n      })\r\n  }\r\n\r\n  // wrapped onUserInput to clear signatures\r\n  const onUserInput = useCallback(\r\n    (field: Field, value: string) => {\r\n      setSignatureData(null)\r\n      return _onUserInput(field, value)\r\n    },\r\n    [_onUserInput],\r\n  )\r\n\r\n  const onLiquidityInput = useCallback((value: string): void => onUserInput(Field.LIQUIDITY, value), [onUserInput])\r\n  const onCurrencyAInput = useCallback((value: string): void => onUserInput(Field.CURRENCY_A, value), [onUserInput])\r\n  const onCurrencyBInput = useCallback((value: string): void => onUserInput(Field.CURRENCY_B, value), [onUserInput])\r\n\r\n  // tx sending\r\n  const addTransaction = useTransactionAdder()\r\n  async function onRemove() {\r\n    if (!routerType || !chainId || !library || !account || !deadline) throw new Error('missing dependencies')\r\n    const { [Field.CURRENCY_A]: currencyAmountA, [Field.CURRENCY_B]: currencyAmountB } = parsedAmounts\r\n    if (!currencyAmountA || !currencyAmountB) {\r\n      throw new Error('missing currency amounts')\r\n    }\r\n    const router = getRouterContract(routerType, chainId, library, account)\r\n\r\n    const amountsMin = {\r\n      [Field.CURRENCY_A]: calculateSlippageAmount(currencyAmountA, allowedSlippage)[0],\r\n      [Field.CURRENCY_B]: calculateSlippageAmount(currencyAmountB, allowedSlippage)[0],\r\n    }\r\n\r\n    if (!currencyA || !currencyB) throw new Error('missing tokens')\r\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\r\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\r\n\r\n    const currencyBIsETH = currencyB === ETHER\r\n    const oneCurrencyIsETH = currencyA === ETHER || currencyBIsETH\r\n\r\n    if (!tokenA || !tokenB) throw new Error('could not wrap')\r\n\r\n    let methodNames: string[]\r\n    let args: Array<string | string[] | number | boolean>\r\n    // we have approval, use normal remove liquidity\r\n    if (approval === ApprovalState.APPROVED) {\r\n      // removeLiquidityETH\r\n      if (oneCurrencyIsETH) {\r\n        methodNames = ['removeLiquidityETH', 'removeLiquidityETHSupportingFeeOnTransferTokens']\r\n        args = [\r\n          currencyBIsETH ? tokenA.address : tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\r\n          account,\r\n          deadline.toHexString(),\r\n        ]\r\n      }\r\n      // removeLiquidity\r\n      else {\r\n        methodNames = ['removeLiquidity']\r\n        args = [\r\n          tokenA.address,\r\n          tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[Field.CURRENCY_A].toString(),\r\n          amountsMin[Field.CURRENCY_B].toString(),\r\n          account,\r\n          deadline.toHexString(),\r\n        ]\r\n      }\r\n    }\r\n    // we have a signataure, use permit versions of remove liquidity\r\n    else if (signatureData !== null) {\r\n      // removeLiquidityETHWithPermit\r\n      if (oneCurrencyIsETH) {\r\n        methodNames = ['removeLiquidityETHWithPermit', 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens']\r\n        args = [\r\n          currencyBIsETH ? tokenA.address : tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\r\n          account,\r\n          signatureData.deadline,\r\n          false,\r\n          signatureData.v,\r\n          signatureData.r,\r\n          signatureData.s,\r\n        ]\r\n      }\r\n      // removeLiquidityETHWithPermit\r\n      else {\r\n        methodNames = ['removeLiquidityWithPermit']\r\n        args = [\r\n          tokenA.address,\r\n          tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[Field.CURRENCY_A].toString(),\r\n          amountsMin[Field.CURRENCY_B].toString(),\r\n          account,\r\n          signatureData.deadline,\r\n          false,\r\n          signatureData.v,\r\n          signatureData.r,\r\n          signatureData.s,\r\n        ]\r\n      }\r\n    } else {\r\n      throw new Error('Attempting to confirm without approval or a signature. Please contact support.')\r\n    }\r\n\r\n    const safeGasEstimates: (BigNumber | undefined)[] = await Promise.all(\r\n      methodNames.map((methodName) =>\r\n        router.estimateGas[methodName](...args)\r\n          .then(calculateGasMargin)\r\n          .catch((err) => {\r\n            console.error(`estimateGas failed`, methodName, args, err)\r\n            return undefined\r\n          }),\r\n      ),\r\n    )\r\n\r\n    const indexOfSuccessfulEstimation = safeGasEstimates.findIndex((safeGasEstimate) =>\r\n      BigNumber.isBigNumber(safeGasEstimate),\r\n    )\r\n\r\n    // all estimations failed...\r\n    if (indexOfSuccessfulEstimation === -1) {\r\n      console.error('This transaction would fail. Please contact support.')\r\n    } else {\r\n      const methodName = methodNames[indexOfSuccessfulEstimation]\r\n      const safeGasEstimate = safeGasEstimates[indexOfSuccessfulEstimation]\r\n\r\n      setAttemptingTxn(true)\r\n      await router[methodName](...args, {\r\n        gasLimit: safeGasEstimate,\r\n      })\r\n        .then((response: TransactionResponse) => {\r\n          setAttemptingTxn(false)\r\n\r\n          addTransaction(response, {\r\n            summary: `Remove ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\r\n              currencyA?.symbol\r\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencyB?.symbol}`,\r\n          })\r\n\r\n          setTxHash(response.hash)\r\n        })\r\n        .catch((err: Error) => {\r\n          setAttemptingTxn(false)\r\n          // we only care if the error is something _other_ than the user rejected the tx\r\n          console.error(err)\r\n        })\r\n    }\r\n  }\r\n\r\n  function modalHeader() {\r\n    return (\r\n      <AutoColumn gap=\"md\">\r\n        <RowBetween align=\"flex-end\">\r\n          <Text fontSize=\"24px\">{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</Text>\r\n          <RowFixed gap=\"4px\">\r\n            <CurrencyLogo currency={currencyA} size=\"24px\" />\r\n            <Text fontSize=\"24px\" ml=\"10px\">\r\n              {currencyA?.symbol}\r\n            </Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n        <RowFixed>\r\n          <AddIcon width=\"16px\" />\r\n        </RowFixed>\r\n        <RowBetween align=\"flex-end\">\r\n          <Text fontSize=\"24px\">{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</Text>\r\n          <RowFixed gap=\"4px\">\r\n            <CurrencyLogo currency={currencyB} size=\"24px\" />\r\n            <Text fontSize=\"24px\" ml=\"10px\">\r\n              {currencyB?.symbol}\r\n            </Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n\r\n        <Text small textAlign=\"left\" pt=\"12px\">\r\n          {t('Output is estimated. If the price changes by more than %slippage%% your transaction will revert.', {\r\n            slippage: allowedSlippage / 100,\r\n          })}\r\n        </Text>\r\n      </AutoColumn>\r\n    )\r\n  }\r\n\r\n  function modalBottom() {\r\n    return (\r\n      <>\r\n        <RowBetween>\r\n          <Text>\r\n            {t('%assetA%/%assetB% Burned', { assetA: currencyA?.symbol ?? '', assetB: currencyB?.symbol ?? '' })}\r\n          </Text>\r\n          <RowFixed>\r\n            <DoubleCurrencyLogo currency0={currencyA} currency1={currencyB} margin />\r\n            <Text>{parsedAmounts[Field.LIQUIDITY]?.toSignificant(6)}</Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n        {pair && (\r\n          <>\r\n            <RowBetween>\r\n              <Text>{t('Price')}</Text>\r\n              <Text>\r\n                1 {currencyA?.symbol} = {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\r\n              </Text>\r\n            </RowBetween>\r\n            <RowBetween>\r\n              <div />\r\n              <Text>\r\n                1 {currencyB?.symbol} = {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\r\n              </Text>\r\n            </RowBetween>\r\n          </>\r\n        )}\r\n        <Button disabled={!(approval === ApprovalState.APPROVED || signatureData !== null)} onClick={() => onRemove()}>\r\n          {t('Confirm')}\r\n        </Button>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const pendingText = t('Removing %amountA% %symbolA% and %amountB% %symbolB%', {\r\n    amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\r\n    symbolA: currencyA?.symbol ?? '',\r\n    amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\r\n    symbolB: currencyB?.symbol ?? '',\r\n  })\r\n\r\n  const liquidityPercentChangeCallback = useCallback(\r\n    (value: number) => {\r\n      onUserInput(Field.LIQUIDITY_PERCENT, value.toString())\r\n    },\r\n    [onUserInput],\r\n  )\r\n\r\n  const oneCurrencyIsETH = currencyA === ETHER || currencyB === ETHER\r\n  const oneCurrencyIsWETH = Boolean(\r\n    chainId &&\r\n      ((currencyA && currencyEquals(WETH[chainId], currencyA)) ||\r\n        (currencyB && currencyEquals(WETH[chainId], currencyB))),\r\n  )\r\n\r\n  const handleSelectCurrencyA = useCallback(\r\n    (currency: Currency) => {\r\n      if (currencyIdB && currencyId(currency) === currencyIdB) {\r\n        history.push(`/remove/${currencyId(currency)}/${currencyIdA}`)\r\n      } else {\r\n        history.push(`/remove/${currencyId(currency)}/${currencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdA, currencyIdB, history],\r\n  )\r\n  const handleSelectCurrencyB = useCallback(\r\n    (currency: Currency) => {\r\n      if (currencyIdA && currencyId(currency) === currencyIdA) {\r\n        history.push(`/remove/${currencyIdB}/${currencyId(currency)}`)\r\n      } else {\r\n        history.push(`/remove/${currencyIdA}/${currencyId(currency)}`)\r\n      }\r\n    },\r\n    [currencyIdA, currencyIdB, history],\r\n  )\r\n\r\n  const handleDismissConfirmation = useCallback(() => {\r\n    setSignatureData(null) // important that we clear signature data to avoid bad sigs\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onUserInput(Field.LIQUIDITY_PERCENT, '0')\r\n    }\r\n    setTxHash('')\r\n  }, [onUserInput, txHash])\r\n\r\n  const [innerLiquidityPercentage, setInnerLiquidityPercentage] = useDebouncedChangeHandler(\r\n    Number.parseInt(parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0)),\r\n    liquidityPercentChangeCallback,\r\n  )\r\n\r\n  const [onPresentRemoveLiquidity] = useModal(\r\n    <TransactionConfirmationModal\r\n      title={t('You will receive')}\r\n      customOnDismiss={handleDismissConfirmation}\r\n      attemptingTxn={attemptingTxn}\r\n      hash={txHash || ''}\r\n      content={() => <ConfirmationModalContent topContent={() => modalHeader()} bottomContent={() => modalBottom()} />}\r\n      pendingText={pendingText}\r\n    />,\r\n    true,\r\n    true,\r\n    'removeLiquidityModal',\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <AppBody>\r\n        <AppHeader\r\n          backTo=\"liquidity\"\r\n          title={t('Remove %assetA%-%assetB% liquidity', {\r\n            assetA: currencyA?.symbol ?? '',\r\n            assetB: currencyB?.symbol ?? '',\r\n          })}\r\n          subtitle={`To receive ${currencyA?.symbol} and ${currencyB?.symbol}`}\r\n          noConfig\r\n        />\r\n\r\n        <CardBody>\r\n          <AutoColumn gap=\"20px\">\r\n            <RowBetween>\r\n              <Text>{t('Amount')}</Text>\r\n              <Button variant=\"text\" scale=\"sm\" onClick={() => setShowDetailed(!showDetailed)}>\r\n                {showDetailed ? t('Simple') : t('Detailed')}\r\n              </Button>\r\n            </RowBetween>\r\n            {!showDetailed && (\r\n              <BorderCard>\r\n                <Text fontSize=\"40px\" bold mb=\"16px\" style={{ lineHeight: 1 }}>\r\n                  {formattedAmounts[Field.LIQUIDITY_PERCENT]}%\r\n                </Text>\r\n                <Slider\r\n                  name=\"lp-amount\"\r\n                  min={0}\r\n                  max={100}\r\n                  value={innerLiquidityPercentage}\r\n                  onValueChanged={(value) => setInnerLiquidityPercentage(Math.ceil(value))}\r\n                  mb=\"16px\"\r\n                />\r\n                <Flex flexWrap=\"wrap\" justifyContent=\"space-evenly\">\r\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '25')}>\r\n                    25%\r\n                  </Button>\r\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '50')}>\r\n                    50%\r\n                  </Button>\r\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '75')}>\r\n                    75%\r\n                  </Button>\r\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}>\r\n                    Max\r\n                  </Button>\r\n                </Flex>\r\n              </BorderCard>\r\n            )}\r\n          </AutoColumn>\r\n          {!showDetailed && (\r\n            <>\r\n              <ColumnCenter>\r\n                <ArrowDownIcon color=\"textSubtle\" width=\"24px\" my=\"16px\" />\r\n              </ColumnCenter>\r\n              <AutoColumn gap=\"10px\">\r\n                <Text bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\r\n                  {t('You will receive')}\r\n                </Text>\r\n                <LightGreyCard>\r\n                  <Flex justifyContent=\"space-between\" mb=\"8px\">\r\n                    <Flex>\r\n                      <CurrencyLogo currency={currencyA} />\r\n                      <Text small color=\"textSubtle\" id=\"remove-liquidity-tokena-symbol\" ml=\"4px\">\r\n                        {currencyA?.symbol}\r\n                      </Text>\r\n                    </Flex>\r\n                    <Text small>{formattedAmounts[Field.CURRENCY_A] || '-'}</Text>\r\n                  </Flex>\r\n                  <Flex justifyContent=\"space-between\">\r\n                    <Flex>\r\n                      <CurrencyLogo currency={currencyB} />\r\n                      <Text small color=\"textSubtle\" id=\"remove-liquidity-tokenb-symbol\" ml=\"4px\">\r\n                        {currencyB?.symbol}\r\n                      </Text>\r\n                    </Flex>\r\n                    <Text small>{formattedAmounts[Field.CURRENCY_B] || '-'}</Text>\r\n                  </Flex>\r\n                  {chainId && (oneCurrencyIsWETH || oneCurrencyIsETH) ? (\r\n                    <RowBetween style={{ justifyContent: 'flex-end', fontSize: '14px' }}>\r\n                      {oneCurrencyIsETH ? (\r\n                        <StyledInternalLink\r\n                          to={`/remove/${currencyA === ETHER ? WETH[chainId].address : currencyIdA}/${\r\n                            currencyB === ETHER ? WETH[chainId].address : currencyIdB\r\n                          }`}\r\n                        >\r\n                          {t('Receive WBNB')}\r\n                        </StyledInternalLink>\r\n                      ) : oneCurrencyIsWETH ? (\r\n                        <StyledInternalLink\r\n                          to={`/remove/${currencyA && currencyEquals(currencyA, WETH[chainId]) ? 'BNB' : currencyIdA}/${\r\n                            currencyB && currencyEquals(currencyB, WETH[chainId]) ? 'BNB' : currencyIdB\r\n                          }`}\r\n                        >\r\n                          {t('Receive BNB')}\r\n                        </StyledInternalLink>\r\n                      ) : null}\r\n                    </RowBetween>\r\n                  ) : null}\r\n                </LightGreyCard>\r\n              </AutoColumn>\r\n            </>\r\n          )}\r\n\r\n          {showDetailed && (\r\n            <Box my=\"16px\">\r\n              <CurrencyInputPanel\r\n                value={formattedAmounts[Field.LIQUIDITY]}\r\n                onUserInput={onLiquidityInput}\r\n                onMax={() => {\r\n                  onUserInput(Field.LIQUIDITY_PERCENT, '100')\r\n                }}\r\n                showMaxButton={!atMaxAmount}\r\n                disableCurrencySelect\r\n                currency={pair?.liquidityToken}\r\n                pair={pair}\r\n                id=\"liquidity-amount\"\r\n                onCurrencySelect={() => null}\r\n              />\r\n              <ColumnCenter>\r\n                <ArrowDownIcon width=\"24px\" my=\"16px\" />\r\n              </ColumnCenter>\r\n              <CurrencyInputPanel\r\n                hideBalance\r\n                value={formattedAmounts[Field.CURRENCY_A]}\r\n                onUserInput={onCurrencyAInput}\r\n                onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\r\n                showMaxButton={!atMaxAmount}\r\n                currency={currencyA}\r\n                label={t('Output')}\r\n                onCurrencySelect={handleSelectCurrencyA}\r\n                id=\"remove-liquidity-tokena\"\r\n              />\r\n              <ColumnCenter>\r\n                <AddIcon width=\"24px\" my=\"16px\" />\r\n              </ColumnCenter>\r\n              <CurrencyInputPanel\r\n                hideBalance\r\n                value={formattedAmounts[Field.CURRENCY_B]}\r\n                onUserInput={onCurrencyBInput}\r\n                onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\r\n                showMaxButton={!atMaxAmount}\r\n                currency={currencyB}\r\n                label={t('Output')}\r\n                onCurrencySelect={handleSelectCurrencyB}\r\n                id=\"remove-liquidity-tokenb\"\r\n              />\r\n            </Box>\r\n          )}\r\n          {pair && (\r\n            <AutoColumn gap=\"10px\" style={{ marginTop: '16px' }}>\r\n              <Text bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\r\n                {t('Prices')}\r\n              </Text>\r\n              <LightGreyCard>\r\n                <Flex justifyContent=\"space-between\">\r\n                  <Text small color=\"textSubtle\">\r\n                    1 {currencyA?.symbol} =\r\n                  </Text>\r\n                  <Text small>\r\n                    {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\r\n                  </Text>\r\n                </Flex>\r\n                <Flex justifyContent=\"space-between\">\r\n                  <Text small color=\"textSubtle\">\r\n                    1 {currencyB?.symbol} =\r\n                  </Text>\r\n                  <Text small>\r\n                    {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\r\n                  </Text>\r\n                </Flex>\r\n              </LightGreyCard>\r\n            </AutoColumn>\r\n          )}\r\n          <Box position=\"relative\" mt=\"16px\">\r\n            {!account ? (\r\n              <ConnectWalletButton />\r\n            ) : (\r\n              <RowBetween>\r\n                <Button\r\n                  variant={approval === ApprovalState.APPROVED || signatureData !== null ? 'success' : 'primary'}\r\n                  onClick={() => onAttemptToApprove()}\r\n                  disabled={approval !== ApprovalState.NOT_APPROVED || signatureData !== null}\r\n                  width=\"100%\"\r\n                  mr=\"0.5rem\"\r\n                >\r\n                  {approval === ApprovalState.PENDING ? (\r\n                    <Dots>{t('Enabling')}</Dots>\r\n                  ) : approval === ApprovalState.APPROVED || signatureData !== null ? (\r\n                    t('Enabled')\r\n                  ) : (\r\n                    t('Enable')\r\n                  )}\r\n                </Button>\r\n                <Button\r\n                  variant={\r\n                    !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\r\n                      ? 'danger'\r\n                      : 'primary'\r\n                  }\r\n                  onClick={onPresentRemoveLiquidity}\r\n                  width=\"100%\"\r\n                  disabled={!isValid || (signatureData === null && approval !== ApprovalState.APPROVED)}\r\n                >\r\n                  {error || t('Remove')}\r\n                </Button>\r\n              </RowBetween>\r\n            )}\r\n          </Box>\r\n        </CardBody>\r\n      </AppBody>\r\n\r\n      {pair ? (\r\n        <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\r\n          <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\r\n        </AutoColumn>\r\n      ) : null}\r\n    </Page>\r\n  )\r\n}\r\n"],"sourceRoot":""}