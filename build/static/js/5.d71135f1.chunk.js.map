{"version":3,"sources":["views/RemoveLiquidity/index.tsx"],"names":["BorderCard","styled","div","theme","colors","cardBorder","RemoveLiquidity","history","match","params","currencyIdA","currencyIdB","currencyA","useCurrency","undefined","currencyB","useActiveWeb3React","account","chainId","library","routerType","useSetRouterType","useMemo","wrappedCurrency","tokenA","tokenB","t","useTranslation","useBurnState","independentField","typedValue","useDerivedBurnInfo","pair","parsedAmounts","error","_onUserInput","useBurnActionHandlers","onUserInput","isValid","useState","showDetailed","setShowDetailed","attemptingTxn","setAttemptingTxn","txHash","setTxHash","deadline","useTransactionDeadline","useUserSlippageTolerance","allowedSlippage","formattedAmounts","Field","LIQUIDITY_PERCENT","equalTo","lessThan","Percent","toFixed","LIQUIDITY","toSignificant","CURRENCY_A","CURRENCY_B","atMaxAmount","pairContract","usePairContract","liquidityToken","address","routerAddress","useRouterAddress","signatureData","setSignatureData","useApproveCallback","approval","approveCallback","a","Error","liquidityAmount","nonces","nonce","EIP712Domain","name","type","domain","RouterType","sphynx","version","verifyingContract","Permit","message","owner","spender","value","raw","toString","toHexString","toNumber","data","JSON","stringify","types","primaryType","send","then","splitSignature","signature","v","r","s","catch","err","code","useCallback","field","onLiquidityInput","onCurrencyAInput","onCurrencyBInput","addTransaction","useTransactionAdder","currencyAmountA","currencyAmountB","router","getRouterContract","calculateSlippageAmount","amountsMin","currencyBIsETH","ETHER","oneCurrencyIsETH","ApprovalState","APPROVED","methodNames","args","Promise","all","map","methodName","estimateGas","calculateGasMargin","console","safeGasEstimates","indexOfSuccessfulEstimation","findIndex","safeGasEstimate","BigNumber","isBigNumber","gasLimit","response","summary","symbol","hash","modalBottom","assetA","assetB","currency0","currency1","margin","priceOf","disabled","onClick","onRemove","pendingText","amountA","symbolA","amountB","symbolB","liquidityPercentChangeCallback","oneCurrencyIsWETH","Boolean","currencyEquals","WETH","handleSelectCurrencyA","currency","currencyId","push","handleSelectCurrencyB","handleDismissConfirmation","useDebouncedChangeHandler","Number","parseInt","innerLiquidityPercentage","setInnerLiquidityPercentage","useModal","title","customOnDismiss","content","topContent","gap","align","fontSize","size","ml","width","small","textAlign","pt","slippage","modalHeader","bottomContent","onPresentRemoveLiquidity","backTo","subtitle","noConfig","variant","scale","bold","mb","style","lineHeight","min","max","onValueChanged","Math","ceil","flexWrap","justifyContent","color","my","textTransform","id","to","onMax","showMaxButton","disableCurrencySelect","onCurrencySelect","hideBalance","label","marginTop","position","mt","onAttemptToApprove","NOT_APPROVED","mr","PENDING","minWidth","maxWidth","showUnwrapped"],"mappings":"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","file":"static/js/5.d71135f1.chunk.js","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { splitSignature } from '@ethersproject/bytes'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { TransactionResponse } from '@ethersproject/providers'\r\nimport { Currency, currencyEquals, ETHER, Percent, WETH, RouterType } from '@sphynxswap/sdk'\r\nimport { Button, Text, AddIcon, ArrowDownIcon, CardBody, Slider, Box, Flex, useModal } from '@sphynxswap/uikit'\r\nimport { RouteComponentProps } from 'react-router'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\r\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\r\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\r\nimport { MinimalPositionCard } from '../../components/PositionCard'\r\nimport { AppHeader, AppBody } from '../../components/App'\r\nimport { RowBetween, RowFixed } from '../../components/Layout/Row'\r\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\r\nimport { LightGreyCard } from '../../components/Card'\r\n\r\nimport { CurrencyLogo, DoubleCurrencyLogo } from '../../components/Logo'\r\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\r\nimport { useCurrency } from '../../hooks/Tokens'\r\nimport { usePairContract, useRouterAddress } from '../../hooks/useContract'\r\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\r\n\r\nimport { useSetRouterType } from '../../state/application/hooks'\r\nimport { useTransactionAdder } from '../../state/transactions/hooks'\r\nimport StyledInternalLink from '../../components/Links'\r\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils'\r\nimport { currencyId } from '../../utils/currencyId'\r\nimport useDebouncedChangeHandler from '../../hooks/useDebouncedChangeHandler'\r\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\r\nimport { useApproveCallback, ApprovalState } from '../../hooks/useApproveCallback'\r\nimport Dots from '../../components/Loader/Dots'\r\nimport { useBurnActionHandlers, useDerivedBurnInfo, useBurnState } from '../../state/burn/hooks'\r\n\r\nimport { Field } from '../../state/burn/actions'\r\nimport { useUserSlippageTolerance } from '../../state/user/hooks'\r\nimport Page from '../Page'\r\n\r\nconst BorderCard = styled.div`\r\n  border: solid 1px ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: 16px;\r\n  padding: 16px;\r\n`\r\n\r\nexport default function RemoveLiquidity({\r\n  history,\r\n  match: {\r\n    params: { currencyIdA, currencyIdB },\r\n  },\r\n}: RouteComponentProps<{ currencyIdA: string; currencyIdB: string }>) {\r\n  const [currencyA, currencyB] = [useCurrency(currencyIdA) ?? undefined, useCurrency(currencyIdB) ?? undefined]\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n  const { routerType } = useSetRouterType()\r\n\r\n  const [tokenA, tokenB] = useMemo(\r\n    () => [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)],\r\n    [currencyA, currencyB, chainId],\r\n  )\r\n\r\n  const { t } = useTranslation()\r\n\r\n  // burn state\r\n  const { independentField, typedValue } = useBurnState()\r\n  const { pair, parsedAmounts, error } = useDerivedBurnInfo(currencyA ?? undefined, currencyB ?? undefined)\r\n  const { onUserInput: _onUserInput } = useBurnActionHandlers()\r\n  const isValid = !error\r\n\r\n  // modal and loading\r\n  const [showDetailed, setShowDetailed] = useState<boolean>(false)\r\n  const [attemptingTxn, setAttemptingTxn] = useState(false) // clicked confirm\r\n\r\n  // txn values\r\n  const [txHash, setTxHash] = useState<string>('')\r\n  const deadline = useTransactionDeadline()\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  const formattedAmounts = {\r\n    [Field.LIQUIDITY_PERCENT]: parsedAmounts[Field.LIQUIDITY_PERCENT].equalTo('0')\r\n      ? '0'\r\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].lessThan(new Percent('1', '100'))\r\n      ? '<1'\r\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0),\r\n    [Field.LIQUIDITY]:\r\n      independentField === Field.LIQUIDITY ? typedValue : parsedAmounts[Field.LIQUIDITY]?.toSignificant(6) ?? '',\r\n    [Field.CURRENCY_A]:\r\n      independentField === Field.CURRENCY_A ? typedValue : parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\r\n    [Field.CURRENCY_B]:\r\n      independentField === Field.CURRENCY_B ? typedValue : parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  const atMaxAmount = parsedAmounts[Field.LIQUIDITY_PERCENT]?.equalTo(new Percent('1'))\r\n\r\n  // pair contract\r\n  const pairContract: Contract | null = usePairContract(pair?.liquidityToken?.address)\r\n\r\n  const routerAddress = useRouterAddress()\r\n\r\n  // allowance handling\r\n  const [signatureData, setSignatureData] = useState<{ v: number; r: string; s: string; deadline: number } | null>(null)\r\n  const [approval, approveCallback] = useApproveCallback(parsedAmounts[Field.LIQUIDITY], routerAddress)\r\n\r\n  async function onAttemptToApprove() {\r\n    if (!pairContract || !pair || !library || !deadline) throw new Error('missing dependencies')\r\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\r\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\r\n\r\n    // try to gather a signature for permission\r\n    const nonce = await pairContract.nonces(account)\r\n\r\n    const EIP712Domain = [\r\n      { name: 'name', type: 'string' },\r\n      { name: 'version', type: 'string' },\r\n      { name: 'chainId', type: 'uint256' },\r\n      { name: 'verifyingContract', type: 'address' },\r\n    ]\r\n\r\n    let domain\r\n\r\n    if (routerType === RouterType.sphynx) {\r\n      domain = {\r\n        name: 'Sphynx LPs',\r\n        version: '1',\r\n        chainId,\r\n        verifyingContract: pair.liquidityToken.address,\r\n      }\r\n    } else {\r\n      domain = {\r\n        name: 'Pancake LPs',\r\n        version: '1',\r\n        chainId,\r\n        verifyingContract: pair.liquidityToken.address,\r\n      }\r\n    }\r\n\r\n    const Permit = [\r\n      { name: 'owner', type: 'address' },\r\n      { name: 'spender', type: 'address' },\r\n      { name: 'value', type: 'uint256' },\r\n      { name: 'nonce', type: 'uint256' },\r\n      { name: 'deadline', type: 'uint256' },\r\n    ]\r\n    const message = {\r\n      owner: account,\r\n      spender: routerAddress,\r\n      value: liquidityAmount.raw.toString(),\r\n      nonce: nonce.toHexString(),\r\n      deadline: deadline.toNumber(),\r\n    }\r\n    const data = JSON.stringify({\r\n      types: {\r\n        EIP712Domain,\r\n        Permit,\r\n      },\r\n      domain,\r\n      primaryType: 'Permit',\r\n      message,\r\n    })\r\n\r\n    library\r\n      .send('eth_signTypedData_v4', [account, data])\r\n      .then(splitSignature)\r\n      .then((signature) => {\r\n        setSignatureData({\r\n          v: signature.v,\r\n          r: signature.r,\r\n          s: signature.s,\r\n          deadline: deadline.toNumber(),\r\n        })\r\n      })\r\n      .catch((err) => {\r\n        // for all errors other than 4001 (EIP-1193 user rejected request), fall back to manual approve\r\n        if (err?.code !== 4001) {\r\n          approveCallback()\r\n        }\r\n      })\r\n  }\r\n\r\n  // wrapped onUserInput to clear signatures\r\n  const onUserInput = useCallback(\r\n    (field: Field, value: string) => {\r\n      setSignatureData(null)\r\n      return _onUserInput(field, value)\r\n    },\r\n    [_onUserInput],\r\n  )\r\n\r\n  const onLiquidityInput = useCallback((value: string): void => onUserInput(Field.LIQUIDITY, value), [onUserInput])\r\n  const onCurrencyAInput = useCallback((value: string): void => onUserInput(Field.CURRENCY_A, value), [onUserInput])\r\n  const onCurrencyBInput = useCallback((value: string): void => onUserInput(Field.CURRENCY_B, value), [onUserInput])\r\n\r\n  // tx sending\r\n  const addTransaction = useTransactionAdder()\r\n  async function onRemove() {\r\n    if (!routerType || !chainId || !library || !account || !deadline) throw new Error('missing dependencies')\r\n    const { [Field.CURRENCY_A]: currencyAmountA, [Field.CURRENCY_B]: currencyAmountB } = parsedAmounts\r\n    if (!currencyAmountA || !currencyAmountB) {\r\n      throw new Error('missing currency amounts')\r\n    }\r\n    const router = getRouterContract(routerType, chainId, library, account)\r\n\r\n    const amountsMin = {\r\n      [Field.CURRENCY_A]: calculateSlippageAmount(currencyAmountA, allowedSlippage)[0],\r\n      [Field.CURRENCY_B]: calculateSlippageAmount(currencyAmountB, allowedSlippage)[0],\r\n    }\r\n\r\n    if (!currencyA || !currencyB) throw new Error('missing tokens')\r\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\r\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\r\n\r\n    const currencyBIsETH = currencyB === ETHER\r\n    const oneCurrencyIsETH = currencyA === ETHER || currencyBIsETH\r\n\r\n    if (!tokenA || !tokenB) throw new Error('could not wrap')\r\n\r\n    let methodNames: string[]\r\n    let args: Array<string | string[] | number | boolean>\r\n    // we have approval, use normal remove liquidity\r\n    if (approval === ApprovalState.APPROVED) {\r\n      // removeLiquidityETH\r\n      if (oneCurrencyIsETH) {\r\n        methodNames = ['removeLiquidityETH', 'removeLiquidityETHSupportingFeeOnTransferTokens']\r\n        args = [\r\n          currencyBIsETH ? tokenA.address : tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\r\n          account,\r\n          deadline.toHexString(),\r\n        ]\r\n      }\r\n      // removeLiquidity\r\n      else {\r\n        methodNames = ['removeLiquidity']\r\n        args = [\r\n          tokenA.address,\r\n          tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[Field.CURRENCY_A].toString(),\r\n          amountsMin[Field.CURRENCY_B].toString(),\r\n          account,\r\n          deadline.toHexString(),\r\n        ]\r\n      }\r\n    }\r\n    // we have a signataure, use permit versions of remove liquidity\r\n    else if (signatureData !== null) {\r\n      // removeLiquidityETHWithPermit\r\n      if (oneCurrencyIsETH) {\r\n        methodNames = ['removeLiquidityETHWithPermit', 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens']\r\n        args = [\r\n          currencyBIsETH ? tokenA.address : tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\r\n          account,\r\n          signatureData.deadline,\r\n          false,\r\n          signatureData.v,\r\n          signatureData.r,\r\n          signatureData.s,\r\n        ]\r\n      }\r\n      // removeLiquidityETHWithPermit\r\n      else {\r\n        methodNames = ['removeLiquidityWithPermit']\r\n        args = [\r\n          tokenA.address,\r\n          tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[Field.CURRENCY_A].toString(),\r\n          amountsMin[Field.CURRENCY_B].toString(),\r\n          account,\r\n          signatureData.deadline,\r\n          false,\r\n          signatureData.v,\r\n          signatureData.r,\r\n          signatureData.s,\r\n        ]\r\n      }\r\n    } else {\r\n      throw new Error('Attempting to confirm without approval or a signature. Please contact support.')\r\n    }\r\n\r\n    const safeGasEstimates: (BigNumber | undefined)[] = await Promise.all(\r\n      methodNames.map((methodName) =>\r\n        router.estimateGas[methodName](...args)\r\n          .then(calculateGasMargin)\r\n          .catch((err) => {\r\n            console.error(`estimateGas failed`, methodName, args, err)\r\n            return undefined\r\n          }),\r\n      ),\r\n    )\r\n\r\n    const indexOfSuccessfulEstimation = safeGasEstimates.findIndex((safeGasEstimate) =>\r\n      BigNumber.isBigNumber(safeGasEstimate),\r\n    )\r\n\r\n    // all estimations failed...\r\n    if (indexOfSuccessfulEstimation === -1) {\r\n      console.error('This transaction would fail. Please contact support.')\r\n    } else {\r\n      const methodName = methodNames[indexOfSuccessfulEstimation]\r\n      const safeGasEstimate = safeGasEstimates[indexOfSuccessfulEstimation]\r\n\r\n      setAttemptingTxn(true)\r\n      await router[methodName](...args, {\r\n        gasLimit: safeGasEstimate,\r\n      })\r\n        .then((response: TransactionResponse) => {\r\n          setAttemptingTxn(false)\r\n\r\n          addTransaction(response, {\r\n            summary: `Remove ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\r\n              currencyA?.symbol\r\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencyB?.symbol}`,\r\n          })\r\n\r\n          setTxHash(response.hash)\r\n        })\r\n        .catch((err: Error) => {\r\n          setAttemptingTxn(false)\r\n          // we only care if the error is something _other_ than the user rejected the tx\r\n          console.error(err)\r\n        })\r\n    }\r\n  }\r\n\r\n  function modalHeader() {\r\n    return (\r\n      <AutoColumn gap=\"md\">\r\n        <RowBetween align=\"flex-end\">\r\n          <Text fontSize=\"24px\">{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</Text>\r\n          <RowFixed gap=\"4px\">\r\n            <CurrencyLogo currency={currencyA} size=\"24px\" />\r\n            <Text fontSize=\"24px\" ml=\"10px\">\r\n              {currencyA?.symbol}\r\n            </Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n        <RowFixed>\r\n          <AddIcon width=\"16px\" />\r\n        </RowFixed>\r\n        <RowBetween align=\"flex-end\">\r\n          <Text fontSize=\"24px\">{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</Text>\r\n          <RowFixed gap=\"4px\">\r\n            <CurrencyLogo currency={currencyB} size=\"24px\" />\r\n            <Text fontSize=\"24px\" ml=\"10px\">\r\n              {currencyB?.symbol}\r\n            </Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n\r\n        <Text small textAlign=\"left\" pt=\"12px\">\r\n          {t('Output is estimated. If the price changes by more than %slippage%% your transaction will revert.', {\r\n            slippage: allowedSlippage / 100,\r\n          })}\r\n        </Text>\r\n      </AutoColumn>\r\n    )\r\n  }\r\n\r\n  function modalBottom() {\r\n    return (\r\n      <>\r\n        <RowBetween>\r\n          <Text>\r\n            {t('%assetA%/%assetB% Burned', { assetA: currencyA?.symbol ?? '', assetB: currencyB?.symbol ?? '' })}\r\n          </Text>\r\n          <RowFixed>\r\n            <DoubleCurrencyLogo currency0={currencyA} currency1={currencyB} margin />\r\n            <Text>{parsedAmounts[Field.LIQUIDITY]?.toSignificant(6)}</Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n        {pair && (\r\n          <>\r\n            <RowBetween>\r\n              <Text>{t('Price')}</Text>\r\n              <Text>\r\n                1 {currencyA?.symbol} = {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\r\n              </Text>\r\n            </RowBetween>\r\n            <RowBetween>\r\n              <div />\r\n              <Text>\r\n                1 {currencyB?.symbol} = {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\r\n              </Text>\r\n            </RowBetween>\r\n          </>\r\n        )}\r\n        <Button disabled={!(approval === ApprovalState.APPROVED || signatureData !== null)} onClick={() => onRemove()}>\r\n          {t('Confirm')}\r\n        </Button>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const pendingText = t('Removing %amountA% %symbolA% and %amountB% %symbolB%', {\r\n    amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\r\n    symbolA: currencyA?.symbol ?? '',\r\n    amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\r\n    symbolB: currencyB?.symbol ?? '',\r\n  })\r\n\r\n  const liquidityPercentChangeCallback = useCallback(\r\n    (value: number) => {\r\n      onUserInput(Field.LIQUIDITY_PERCENT, value.toString())\r\n    },\r\n    [onUserInput],\r\n  )\r\n\r\n  const oneCurrencyIsETH = currencyA === ETHER || currencyB === ETHER\r\n  const oneCurrencyIsWETH = Boolean(\r\n    chainId &&\r\n      ((currencyA && currencyEquals(WETH[chainId], currencyA)) ||\r\n        (currencyB && currencyEquals(WETH[chainId], currencyB))),\r\n  )\r\n\r\n  const handleSelectCurrencyA = useCallback(\r\n    (currency: Currency) => {\r\n      if (currencyIdB && currencyId(currency) === currencyIdB) {\r\n        history.push(`/remove/${currencyId(currency)}/${currencyIdA}`)\r\n      } else {\r\n        history.push(`/remove/${currencyId(currency)}/${currencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdA, currencyIdB, history],\r\n  )\r\n  const handleSelectCurrencyB = useCallback(\r\n    (currency: Currency) => {\r\n      if (currencyIdA && currencyId(currency) === currencyIdA) {\r\n        history.push(`/remove/${currencyIdB}/${currencyId(currency)}`)\r\n      } else {\r\n        history.push(`/remove/${currencyIdA}/${currencyId(currency)}`)\r\n      }\r\n    },\r\n    [currencyIdA, currencyIdB, history],\r\n  )\r\n\r\n  const handleDismissConfirmation = useCallback(() => {\r\n    setSignatureData(null) // important that we clear signature data to avoid bad sigs\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onUserInput(Field.LIQUIDITY_PERCENT, '0')\r\n    }\r\n    setTxHash('')\r\n  }, [onUserInput, txHash])\r\n\r\n  const [innerLiquidityPercentage, setInnerLiquidityPercentage] = useDebouncedChangeHandler(\r\n    Number.parseInt(parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0)),\r\n    liquidityPercentChangeCallback,\r\n  )\r\n\r\n  const [onPresentRemoveLiquidity] = useModal(\r\n    <TransactionConfirmationModal\r\n      title={t('You will receive')}\r\n      customOnDismiss={handleDismissConfirmation}\r\n      attemptingTxn={attemptingTxn}\r\n      hash={txHash || ''}\r\n      content={() => <ConfirmationModalContent topContent={() => modalHeader()} bottomContent={() => modalBottom()} />}\r\n      pendingText={pendingText}\r\n    />,\r\n    true,\r\n    true,\r\n    'removeLiquidityModal',\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <AppBody>\r\n        <AppHeader\r\n          backTo=\"liquidity\"\r\n          title={t('Remove %assetA%-%assetB% liquidity', {\r\n            assetA: currencyA?.symbol ?? '',\r\n            assetB: currencyB?.symbol ?? '',\r\n          })}\r\n          subtitle={`To receive ${currencyA?.symbol} and ${currencyB?.symbol}`}\r\n          noConfig\r\n        />\r\n\r\n        <CardBody>\r\n          <AutoColumn gap=\"20px\">\r\n            <RowBetween>\r\n              <Text>{t('Amount')}</Text>\r\n              <Button variant=\"text\" scale=\"sm\" onClick={() => setShowDetailed(!showDetailed)}>\r\n                {showDetailed ? t('Simple') : t('Detailed')}\r\n              </Button>\r\n            </RowBetween>\r\n            {!showDetailed && (\r\n              <BorderCard>\r\n                <Text fontSize=\"40px\" bold mb=\"16px\" style={{ lineHeight: 1 }}>\r\n                  {formattedAmounts[Field.LIQUIDITY_PERCENT]}%\r\n                </Text>\r\n                <Slider\r\n                  name=\"lp-amount\"\r\n                  min={0}\r\n                  max={100}\r\n                  value={innerLiquidityPercentage}\r\n                  onValueChanged={(value) => setInnerLiquidityPercentage(Math.ceil(value))}\r\n                  mb=\"16px\"\r\n                />\r\n                <Flex flexWrap=\"wrap\" justifyContent=\"space-evenly\">\r\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '25')}>\r\n                    25%\r\n                  </Button>\r\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '50')}>\r\n                    50%\r\n                  </Button>\r\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '75')}>\r\n                    75%\r\n                  </Button>\r\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}>\r\n                    Max\r\n                  </Button>\r\n                </Flex>\r\n              </BorderCard>\r\n            )}\r\n          </AutoColumn>\r\n          {!showDetailed && (\r\n            <>\r\n              <ColumnCenter>\r\n                <ArrowDownIcon color=\"textSubtle\" width=\"24px\" my=\"16px\" />\r\n              </ColumnCenter>\r\n              <AutoColumn gap=\"10px\">\r\n                <Text bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\r\n                  {t('You will receive')}\r\n                </Text>\r\n                <LightGreyCard>\r\n                  <Flex justifyContent=\"space-between\" mb=\"8px\">\r\n                    <Flex>\r\n                      <CurrencyLogo currency={currencyA} />\r\n                      <Text small color=\"textSubtle\" id=\"remove-liquidity-tokena-symbol\" ml=\"4px\">\r\n                        {currencyA?.symbol}\r\n                      </Text>\r\n                    </Flex>\r\n                    <Text small>{formattedAmounts[Field.CURRENCY_A] || '-'}</Text>\r\n                  </Flex>\r\n                  <Flex justifyContent=\"space-between\">\r\n                    <Flex>\r\n                      <CurrencyLogo currency={currencyB} />\r\n                      <Text small color=\"textSubtle\" id=\"remove-liquidity-tokenb-symbol\" ml=\"4px\">\r\n                        {currencyB?.symbol}\r\n                      </Text>\r\n                    </Flex>\r\n                    <Text small>{formattedAmounts[Field.CURRENCY_B] || '-'}</Text>\r\n                  </Flex>\r\n                  {chainId && (oneCurrencyIsWETH || oneCurrencyIsETH) ? (\r\n                    <RowBetween style={{ justifyContent: 'flex-end', fontSize: '14px' }}>\r\n                      {oneCurrencyIsETH ? (\r\n                        <StyledInternalLink\r\n                          to={`/remove/${currencyA === ETHER ? WETH[chainId].address : currencyIdA}/${\r\n                            currencyB === ETHER ? WETH[chainId].address : currencyIdB\r\n                          }`}\r\n                        >\r\n                          {t('Receive WBNB')}\r\n                        </StyledInternalLink>\r\n                      ) : oneCurrencyIsWETH ? (\r\n                        <StyledInternalLink\r\n                          to={`/remove/${currencyA && currencyEquals(currencyA, WETH[chainId]) ? 'BNB' : currencyIdA}/${\r\n                            currencyB && currencyEquals(currencyB, WETH[chainId]) ? 'BNB' : currencyIdB\r\n                          }`}\r\n                        >\r\n                          {t('Receive BNB')}\r\n                        </StyledInternalLink>\r\n                      ) : null}\r\n                    </RowBetween>\r\n                  ) : null}\r\n                </LightGreyCard>\r\n              </AutoColumn>\r\n            </>\r\n          )}\r\n\r\n          {showDetailed && (\r\n            <Box my=\"16px\">\r\n              <CurrencyInputPanel\r\n                value={formattedAmounts[Field.LIQUIDITY]}\r\n                onUserInput={onLiquidityInput}\r\n                onMax={() => {\r\n                  onUserInput(Field.LIQUIDITY_PERCENT, '100')\r\n                }}\r\n                showMaxButton={!atMaxAmount}\r\n                disableCurrencySelect\r\n                currency={pair?.liquidityToken}\r\n                pair={pair}\r\n                id=\"liquidity-amount\"\r\n                onCurrencySelect={() => null}\r\n              />\r\n              <ColumnCenter>\r\n                <ArrowDownIcon width=\"24px\" my=\"16px\" />\r\n              </ColumnCenter>\r\n              <CurrencyInputPanel\r\n                hideBalance\r\n                value={formattedAmounts[Field.CURRENCY_A]}\r\n                onUserInput={onCurrencyAInput}\r\n                onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\r\n                showMaxButton={!atMaxAmount}\r\n                currency={currencyA}\r\n                label={t('Output')}\r\n                onCurrencySelect={handleSelectCurrencyA}\r\n                id=\"remove-liquidity-tokena\"\r\n              />\r\n              <ColumnCenter>\r\n                <AddIcon width=\"24px\" my=\"16px\" />\r\n              </ColumnCenter>\r\n              <CurrencyInputPanel\r\n                hideBalance\r\n                value={formattedAmounts[Field.CURRENCY_B]}\r\n                onUserInput={onCurrencyBInput}\r\n                onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\r\n                showMaxButton={!atMaxAmount}\r\n                currency={currencyB}\r\n                label={t('Output')}\r\n                onCurrencySelect={handleSelectCurrencyB}\r\n                id=\"remove-liquidity-tokenb\"\r\n              />\r\n            </Box>\r\n          )}\r\n          {pair && (\r\n            <AutoColumn gap=\"10px\" style={{ marginTop: '16px' }}>\r\n              <Text bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\r\n                {t('Prices')}\r\n              </Text>\r\n              <LightGreyCard>\r\n                <Flex justifyContent=\"space-between\">\r\n                  <Text small color=\"textSubtle\">\r\n                    1 {currencyA?.symbol} =\r\n                  </Text>\r\n                  <Text small>\r\n                    {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\r\n                  </Text>\r\n                </Flex>\r\n                <Flex justifyContent=\"space-between\">\r\n                  <Text small color=\"textSubtle\">\r\n                    1 {currencyB?.symbol} =\r\n                  </Text>\r\n                  <Text small>\r\n                    {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\r\n                  </Text>\r\n                </Flex>\r\n              </LightGreyCard>\r\n            </AutoColumn>\r\n          )}\r\n          <Box position=\"relative\" mt=\"16px\">\r\n            {!account ? (\r\n              <ConnectWalletButton />\r\n            ) : (\r\n              <RowBetween>\r\n                <Button\r\n                  variant={approval === ApprovalState.APPROVED || signatureData !== null ? 'success' : 'primary'}\r\n                  onClick={() => onAttemptToApprove()}\r\n                  disabled={approval !== ApprovalState.NOT_APPROVED || signatureData !== null}\r\n                  width=\"100%\"\r\n                  mr=\"0.5rem\"\r\n                >\r\n                  {approval === ApprovalState.PENDING ? (\r\n                    <Dots>{t('Enabling')}</Dots>\r\n                  ) : approval === ApprovalState.APPROVED || signatureData !== null ? (\r\n                    t('Enabled')\r\n                  ) : (\r\n                    t('Enable')\r\n                  )}\r\n                </Button>\r\n                <Button\r\n                  variant={\r\n                    !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\r\n                      ? 'danger'\r\n                      : 'primary'\r\n                  }\r\n                  onClick={onPresentRemoveLiquidity}\r\n                  width=\"100%\"\r\n                  disabled={!isValid || (signatureData === null && approval !== ApprovalState.APPROVED)}\r\n                >\r\n                  {error || t('Remove')}\r\n                </Button>\r\n              </RowBetween>\r\n            )}\r\n          </Box>\r\n        </CardBody>\r\n      </AppBody>\r\n\r\n      {pair ? (\r\n        <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\r\n          <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\r\n        </AutoColumn>\r\n      ) : null}\r\n    </Page>\r\n  )\r\n}\r\n"],"sourceRoot":""}