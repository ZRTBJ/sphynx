{"version":3,"sources":["views/Pools/components/ToggleView/ToggleView.tsx","state/pools/hooks.ts","views/Pools/components/PoolCard/AprRow.tsx","views/Pools/components/PoolCard/StyledCard.tsx","views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx","views/Pools/components/PoolCard/CardFooter/index.tsx","views/Pools/components/CakeVaultCard/CakeVaultTokenPairImage.tsx","views/Pools/components/PoolCard/StyledCardHeader.tsx","hooks/useLastUpdated.ts","views/Pools/hooks/useApprove.ts","views/Pools/components/PoolCard/CardActions/ApprovalAction.tsx","views/Pools/components/PoolCard/Modals/NotEnoughTokensModal.tsx","views/Pools/components/PoolCard/Modals/PercentageButton.tsx","views/Pools/hooks/useStakePool.ts","views/Pools/hooks/useUnstakePool.ts","views/Pools/components/PoolCard/Modals/StakeModal.tsx","views/Pools/components/PoolCard/CardActions/StakeActions.tsx","views/Pools/hooks/useHarvestPool.ts","views/Pools/components/PoolCard/Modals/CollectModal.tsx","views/Pools/components/PoolCard/CardActions/HarvestActions.tsx","views/Pools/components/PoolCard/CardActions/index.tsx","views/Pools/components/PoolCard/index.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx","views/Pools/hooks/useWithdrawalFeeTimer.ts","utils/getTimePeriods.ts","views/Pools/components/CakeVaultCard/WithdrawalFeeTimer.tsx","views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx","views/Pools/components/CakeVaultCard/FeeSummary.tsx","views/Pools/components/CakeVaultCard/VaultStakeModal.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/HasSharesActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultStakeActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitBalance.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx","views/Pools/components/CakeVaultCard/index.tsx","views/Pools/components/PoolTabButtons.tsx","views/Pools/components/BountyModal.tsx","views/Pools/components/BountyCard.tsx","views/Pools/components/PoolsTable/Cells/BaseCell.tsx","views/Pools/components/PoolsTable/Cells/NameCell.tsx","views/Pools/components/PoolsTable/Cells/EarningsCell.tsx","views/Pools/components/PoolsTable/Apr.tsx","views/Pools/components/PoolsTable/Cells/AprCell.tsx","views/Pools/components/PoolsTable/Cells/TotalStakedCell.tsx","views/Pools/components/PoolsTable/Cells/EndsInCell.tsx","views/Pools/components/PoolsTable/Cells/ExpandActionCell.tsx","views/Pools/components/PoolsTable/ActionPanel/styles.ts","views/Pools/components/PoolsTable/ActionPanel/Harvest.tsx","views/Pools/components/PoolsTable/ActionPanel/Stake.tsx","views/Pools/components/PoolsTable/ActionPanel/ActionPanel.tsx","views/Pools/components/PoolsTable/PoolRow.tsx","views/Pools/components/PoolsTable/PoolsTable.tsx","views/Pools/index.tsx"],"names":["ViewMode","useCakeVault","useSelector","state","pools","cakeVault","totalSharesAsString","totalShares","pricePerFullShareAsString","pricePerFullShare","totalCakeInVaultAsString","totalCakeInVault","estimatedCakeBountyRewardAsString","estimatedCakeBountyReward","totalPendingCakeHarvestAsString","totalPendingCakeHarvest","fees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","userData","isLoading","userSharesAsString","userShares","cakeAtLastUserActionAsString","cakeAtLastUserAction","lastDepositedTime","lastUserActionTime","useMemo","BigNumber","AprRow","pool","t","useTranslation","stakingToken","earningToken","isFinished","apr","earningTokenPrice","isAutoVault","tooltipContent","useTooltip","placement","targetRef","tooltip","tooltipVisible","getAprData","earningsPercentageToDisplay","roundingDecimals","compoundFrequency","useModal","ApyCalculatorModal","tokenPrice","linkLabel","symbol","linkHref","earningTokenSymbol","onPresentApyModal","alignItems","justifyContent","ref","width","height","Balance","fontSize","isDisabled","value","decimals","unit","bold","onClick","variant","scale","color","StyledCard","styled","Card","theme","colors","mediaQueries","sm","ExpandedWrapper","Flex","ExpandedFooter","account","currentBlock","useBlock","totalStaked","startBlock","endBlock","stakingLimit","contractAddress","sousId","tokenAddress","address","getAddress","poolContractAddress","cakeVaultContractAddress","getCakeVaultAddress","isMetaMaskInScope","window","ethereum","isMetaMask","isManualCakePool","getPoolBlockInfo","shouldShowBlockCountdown","blocksUntilStart","blocksRemaining","hasPoolStarted","blocksToDisplay","totalStakedTargetRef","totalStakedTooltip","totalStakedTooltipVisible","flexDirection","mb","small","gte","getBalanceNumber","manualCakeTotalMinusAutoVault","minus","getTotalStakedBalance","ml","mt","gt","getFullDisplayBalance","external","href","getBscScanLink","textTransform","projectLink","BASE_BSC_SCAN_URL","p","registerToken","React","memo","ExpandableButtonWrapper","CardFooterWrapper","CardFooter","input","Footer","useState","isExpanded","setIsExpanded","manualTooltipText","autoTooltipText","expanded","CakeVaultTokenPairImage","props","primaryTokenSrc","tokens","sphynx","primarySrc","secondarySrc","Wrapper","CardHeader","background","backgroundDisabled","gradients","radii","card","StyledCardHeader","isStaking","isCakePool","primaryToken","secondaryToken","useLastUpdated","Date","now","lastUpdated","setStateLastUpdated","previousLastUpdated","usePreviousValue","setLastUpdated","useCallback","useApprovePool","lpContract","requestedApproval","setRequestedApproval","useToast","toastSuccess","toastError","dispatch","useAppDispatch","useWeb3React","sousChefContract","useSousChef","handleApprove","a","approve","ethers","constants","MaxUint256","tx","wait","receipt","updateUserAllowance","status","console","error","useVaultApprove","cakeVaultContract","useCakeVaultContract","cakeContract","useCake","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","useEffect","checkApprovalStatus","allowance","response","currentAllowance","toString","ApprovalAction","stakingTokenContract","useERC20","endIcon","spin","disabled","StyledLink","Link","NotEnoughTokensModal","tokenSymbol","onDismiss","useTheme","title","headerBackground","cardHeader","as","StyledButton","Button","PercentageButton","children","mx","options","gasLimit","DEFAULT_GAS_LIMIT","sousStake","amount","deposit","times","BIG_TEN","pow","sousStakeBnb","DEFAULT_TOKEN_DECIMAL","useStakePool","isUsingBnb","masterChefContract","useMasterchef","handleStake","stakeFarm","updateUserStakedBalance","updateUserBalance","onStake","sousUnstake","withdraw","sousEmergencyUnstake","emergencyWithdraw","useUnstakePool","enableEmergencyWithdraw","handleUnstake","unstakeFarm","updateUserPendingReward","onUnstake","StakeModal","isBnbPool","stakingTokenBalance","stakingTokenPrice","isRemovingStake","pendingTx","setPendingTx","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","percent","setPercent","getCalculatedStakingLimit","stakedBalance","usdValueStaked","formatNumber","toNumber","fullDecimalStakeAmount","getDecimalAmount","plus","handleChangePercent","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","amountToStake","handleConfirmClick","style","textAlign","token","minWidth","src","alt","onUserInput","convertedInput","percentage","Math","floor","min","currencyValue","isWarning","balance","max","onValueChanged","name","valueLabel","step","parseFloat","StakeAction","isStaked","stakedTokenBalance","stakedTokenDollarBalance","onPresentTokenRequired","onPresentStake","onPresentUnstake","reachStakingLimit","prefix","mr","harvestPool","harvestPoolBnb","BIG_ZERO","useHarvestPool","handleHarvest","harvestFarm","onReward","CollectModal","formattedBalance","fullBalance","earningsDollarValue","isCompoundPool","shouldCompound","setShouldCompound","tooltipOffset","handleHarvestConfirm","activeIndex","onItemClick","index","pb","HarvestActions","earnings","earningTokenBalance","earningTokenDollarBalance","hasEarnings","onPresentCollect","display","InlineText","Text","CardActions","harvest","poolCategory","PoolCategory","BINANCE","pendingReward","needsApproval","StakeActions","StyledCardBody","CardBody","PoolCard","accountHasStakedBalance","ribbon","variantColor","text","ConnectWalletButton","VaultApprovalAction","useWithdrawalFeeTimer","secondsRemaining","setSecondsRemaining","hasUnstakingFee","setHasUnstakingFee","currentSeconds","setCurrentSeconds","secondsRemainingCalc","doesUnstakingFeeApply","timerInterval","setInterval","prevSeconds","clearInterval","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","abs","timeLeft","years","months","days","hours","minutes","WithdrawalFeeTimer","day","hour","minute","UnstakingFeeCountdownRow","isTableVariant","feeAsDecimal","fee","parseInt","noFeeToPay","shouldShowTimer","toLowerCase","FeeSummary","stakingTokenSymbol","feeInCake","toFixed","callOptions","VaultStakeModal","stakingMax","cakePriceBusd","usePriceCakeBusd","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","convertCakeToShares","triggerWithdrawAllThreshold","sharesRemaining","sharesAsBigNumber","lte","withdrawAll","fetchCakeVaultUserData","handleDeposit","HasSharesActions","convertSharesToCake","cakeAsBigNumber","cakeAsNumberBalance","stakedDollarValue","VaultStakeActions","accountHasSharesStaked","CakeVaultCardActions","RecentCakeProfitBalance","cakeToDisplay","dollarValueToDisplay","dateStringToDisplay","RecentCakeProfitCountdownRow","getCakeVaultEarnings","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","lastActionInMs","toLocaleString","CakeVaultCard","showStakedOnly","isVaultUserDataLoading","performanceFeeAsDecimal","isActive","RecentCakeProfitRow","VaultCardActions","Container","div","ToggleView","viewMode","onToggle","handleToggle","mode","id","CARD","TABLE","ToggleWrapper","ViewControls","PoolTabButtons","stakedOnly","setStakedOnly","hasStakeInFinishedPools","setViewMode","url","useRouteMatch","viewModeToggle","liveOrFinishedSwitch","to","show","stakedOnlySwitch","checked","onChange","Divider","BountyModal","TooltipComponent","callFeeAsDecimal","totalYieldToDisplay","estimatedDollarBountyReward","hasFetchedDollarBounty","hasFetchedCakeBounty","dollarBountyToDisplay","cakeBountyToDisplay","tooltipPadding","right","BountyCard","fontWeight","onPresentBountyModal","BaseCell","CellContent","StyledCell","NameCell","useMatchBreakpoints","isXs","isSm","hasVaultShares","showStakedTag","subtitle","showSubtitle","toLocaleLowerCase","role","HelpIconWrapper","EarningsCell","userDataLoaded","labelText","asset","event","stopPropagation","undefined","Apr","showIcon","openRoiModal","padding","marginLeft","md","AprCell","TotalStakedCell","totalStakedBalance","EndsInCell","renderBlocks","flex","e","showLoading","ArrowIcon","ChevronDownIcon","toggled","isFullLayout","ActionContainer","xl","ActionTitles","ActionContent","HarvestAction","actionTitle","pt","alignSelf","lineHeight","marginTop","IconButtonWrapper","Staked","handlePoolApprove","requestedPoolApproval","handleVaultApprove","requestedVaultApproval","isNotVaultAndHasStake","hasSharesStaked","isVaultWithShares","stakedAutoDollarValue","onPresentVaultStake","onPresentVaultUnstake","expandAnimation","keyframes","collapseAnimation","StyledActionPanel","css","lg","InfoSection","Box","ActionPanel","breakpoints","isMd","tagTargetRef","tagTooltip","tagTooltipVisible","maxStakeRow","blocksRow","aprRow","totalStakedRow","maxWidth","handleRegisterToken","Harvest","Stake","StyledRow","PoolRow","isLg","isXl","setExpanded","shouldRenderActionPanel","useDelayedUnmount","prev","ExpandActionCell","StyledTable","StyledTableBorder","ScrollButtonContainer","PoolsTable","tableWrapperEl","useRef","map","current","scrollIntoView","behavior","CardLayout","FlexLayout","PoolControls","FilterContainer","LabelWrapper","ControlStretch","Pools","location","useLocation","fastRefresh","useRefresh","fetchPoolsUserDataAsync","data","transformPool","usePools","poolsWithoutAutoVault","usePersistState","localStorageKey","numberOfPoolsVisible","setNumberOfPoolsVisible","observerIsSet","setObserverIsSet","loadMoreRef","searchQuery","setSearchQuery","sortOption","setSortOption","chosenPoolsLength","accountHasVaultShares","partition","finishedPools","openPools","stakedOnlyFinishedPools","filter","isGreaterThan","stakedOnlyOpenPools","length","usePollFarmsData","fetchCakeVaultPublicData","fetchCakeVaultFees","useFetchCakeVault","slowRefresh","fetchPoolsPublicData","simpleRpcProvider","getBlockNumber","blockNumber","fetchPoolsPublicDataAsync","fetchPoolsStakingLimitsAsync","useFetchPublicPoolsData","IntersectionObserver","entries","isIntersecting","poolsCurrentlyVisible","rootMargin","threshold","observe","chosenPools","showFinishedPools","pathname","includes","lowercaseQuery","latinise","poolsToSort","orderBy","sortPools","slice","cardLayout","tableLayout","PageHeader","Page","Select","label","option","SearchInput","target","placeholder","Loading"],"mappings":"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","file":"static/js/18.39cdee86.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@sphynxswap/uikit'\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-right: 0px;\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n    margin-right: 16px;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import { useEffect, useMemo } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  fetchCakeVaultPublicData,\r\n  fetchCakeVaultUserData,\r\n  fetchCakeVaultFees,\r\n  fetchPoolsStakingLimitsAsync,\r\n} from '.'\r\nimport { State, Pool } from '../types'\r\nimport { transformPool } from './helpers'\r\n\r\nexport const useFetchPublicPoolsData = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchPoolsPublicData = async () => {\r\n      const blockNumber = await simpleRpcProvider.getBlockNumber()\r\n      dispatch(fetchPoolsPublicDataAsync(blockNumber))\r\n    }\r\n\r\n    fetchPoolsPublicData()\r\n    dispatch(fetchPoolsStakingLimitsAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\nexport const usePools = (account): { pools: Pool[]; userDataLoaded: boolean } => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useAppDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const { pools, userDataLoaded } = useSelector((state: State) => ({\r\n    pools: state.pools.data,\r\n    userDataLoaded: state.pools.userDataLoaded,\r\n  }))\r\n  return { pools: pools.map(transformPool), userDataLoaded }\r\n}\r\n\r\nexport const useFetchCakeVault = () => {\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCakeVaultPublicData())\r\n  }, [dispatch, fastRefresh])\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCakeVaultUserData({ account }))\r\n  }, [dispatch, fastRefresh, account])\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCakeVaultFees())\r\n  }, [dispatch])\r\n}\r\n\r\nexport const useCakeVault = () => {\r\n  const {\r\n    totalShares: totalSharesAsString,\r\n    pricePerFullShare: pricePerFullShareAsString,\r\n    totalCakeInVault: totalCakeInVaultAsString,\r\n    estimatedCakeBountyReward: estimatedCakeBountyRewardAsString,\r\n    totalPendingCakeHarvest: totalPendingCakeHarvestAsString,\r\n    fees: { performanceFee, callFee, withdrawalFee, withdrawalFeePeriod },\r\n    userData: {\r\n      isLoading,\r\n      userShares: userSharesAsString,\r\n      cakeAtLastUserAction: cakeAtLastUserActionAsString,\r\n      lastDepositedTime,\r\n      lastUserActionTime,\r\n    },\r\n  } = useSelector((state: State) => state.pools.cakeVault)\r\n\r\n  const estimatedCakeBountyReward = useMemo(() => {\r\n    return new BigNumber(estimatedCakeBountyRewardAsString)\r\n  }, [estimatedCakeBountyRewardAsString])\r\n\r\n  const totalPendingCakeHarvest = useMemo(() => {\r\n    return new BigNumber(totalPendingCakeHarvestAsString)\r\n  }, [totalPendingCakeHarvestAsString])\r\n\r\n  const totalShares = useMemo(() => {\r\n    return new BigNumber(totalSharesAsString)\r\n  }, [totalSharesAsString])\r\n\r\n  const pricePerFullShare = useMemo(() => {\r\n    return new BigNumber(pricePerFullShareAsString)\r\n  }, [pricePerFullShareAsString])\r\n\r\n  const totalCakeInVault = useMemo(() => {\r\n    return new BigNumber(totalCakeInVaultAsString)\r\n  }, [totalCakeInVaultAsString])\r\n\r\n  const userShares = useMemo(() => {\r\n    return new BigNumber(userSharesAsString)\r\n  }, [userSharesAsString])\r\n\r\n  const cakeAtLastUserAction = useMemo(() => {\r\n    return new BigNumber(cakeAtLastUserActionAsString)\r\n  }, [cakeAtLastUserActionAsString])\r\n\r\n  return {\r\n    totalShares,\r\n    pricePerFullShare,\r\n    totalCakeInVault,\r\n    estimatedCakeBountyReward,\r\n    totalPendingCakeHarvest,\r\n    fees: {\r\n      performanceFee,\r\n      callFee,\r\n      withdrawalFee,\r\n      withdrawalFeePeriod,\r\n    },\r\n    userData: {\r\n      isLoading,\r\n      userShares,\r\n      cakeAtLastUserAction,\r\n      lastDepositedTime,\r\n      lastUserActionTime,\r\n    },\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@sphynxswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport { Pool } from 'state/types'\r\nimport { getAprData } from 'views/Pools/helpers'\r\n\r\ninterface AprRowProps {\r\n  pool: Pool\r\n  performanceFee?: number\r\n}\r\n\r\nconst AprRow: React.FC<AprRowProps> = ({ pool, performanceFee = 0 }) => {\r\n  const { t } = useTranslation()\r\n  const { stakingToken, earningToken, isFinished, apr, earningTokenPrice, isAutoVault } = pool\r\n\r\n  const tooltipContent = isAutoVault\r\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\r\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\r\n\r\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\r\n\r\n  const apyModalLink = '/swap'\r\n\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      tokenPrice={earningTokenPrice}\r\n      apr={apr}\r\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n      linkHref={apyModalLink}\r\n      earningTokenSymbol={earningToken.symbol}\r\n      roundingDecimals={roundingDecimals}\r\n      compoundFrequency={compoundFrequency}\r\n      performanceFee={performanceFee}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef}>{isAutoVault ? `${t('APY')}:` : `${t('APR')}:`}</TooltipText>\r\n      {isFinished || !apr ? (\r\n        <Skeleton width=\"82px\" height=\"32px\" />\r\n      ) : (\r\n        <Flex alignItems=\"center\">\r\n          <Balance\r\n            fontSize=\"16px\"\r\n            isDisabled={isFinished}\r\n            value={earningsPercentageToDisplay}\r\n            decimals={2}\r\n            unit=\"%\"\r\n            bold\r\n          />\r\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\r\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </Flex>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default AprRow\r\n","import styled from 'styled-components'\r\nimport { Card } from '@sphynxswap/uikit'\r\n\r\nexport const StyledCard = styled(Card)<{ isFinished?: boolean }>`\r\n  max-width: 352px;\r\n  margin: 0 8px 24px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-self: baseline;\r\n  position: relative;\r\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin: 0 12px 46px;\r\n  }\r\n`\r\n\r\nexport default StyledCard\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport {\r\n  Flex,\r\n  MetamaskIcon,\r\n  Text,\r\n  TooltipText,\r\n  LinkExternal,\r\n  TimerIcon,\r\n  Skeleton,\r\n  useTooltip,\r\n  Button,\r\n  Link,\r\n  HelpIcon,\r\n} from '@sphynxswap/uikit'\r\nimport { BASE_BSC_SCAN_URL } from 'config'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { Pool } from 'state/types'\r\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\r\nimport { registerToken } from 'utils/wallet'\r\nimport { getBscScanLink } from 'utils'\r\nimport Balance from 'components/Balance'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\n\r\ninterface ExpandedFooterProps {\r\n  pool: Pool\r\n  account: string\r\n}\r\n\r\nconst ExpandedWrapper = styled(Flex)`\r\n  svg {\r\n    height: 14px;\r\n    width: 14px;\r\n  }\r\n`\r\n\r\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account }) => {\r\n  const { t } = useTranslation()\r\n  const { currentBlock } = useBlock()\r\n  const {\r\n    totalCakeInVault,\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n\r\n  const {\r\n    stakingToken,\r\n    earningToken,\r\n    totalStaked,\r\n    startBlock,\r\n    endBlock,\r\n    stakingLimit,\r\n    contractAddress,\r\n    sousId,\r\n    isAutoVault,\r\n  } = pool\r\n\r\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\r\n  const poolContractAddress = getAddress(contractAddress)\r\n  const cakeVaultContractAddress = getCakeVaultAddress()\r\n  const isMetaMaskInScope = !!window.ethereum?.isMetaMask\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Subtracted automatically from each yield harvest and burned.'),\r\n    { placement: 'bottom-start' },\r\n  )\r\n\r\n  const getTotalStakedBalance = () => {\r\n    if (isAutoVault) {\r\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\r\n    }\r\n    if (isManualCakePool) {\r\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\r\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\r\n    }\r\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\r\n  }\r\n\r\n  const {\r\n    targetRef: totalStakedTargetRef,\r\n    tooltip: totalStakedTooltip,\r\n    tooltipVisible: totalStakedTooltipVisible,\r\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  return (\r\n    <ExpandedWrapper flexDirection=\"column\">\r\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Text small>{t('Total staked')}:</Text>\r\n        <Flex alignItems=\"flex-start\">\r\n          {totalStaked && totalStaked.gte(0) ? (\r\n            <>\r\n              <Balance small value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\r\n              <span ref={totalStakedTargetRef}>\r\n                <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" mt=\"4px\" />\r\n              </span>\r\n            </>\r\n          ) : (\r\n            <Skeleton width=\"90px\" height=\"21px\" />\r\n          )}\r\n          {totalStakedTooltipVisible && totalStakedTooltip}\r\n        </Flex>\r\n      </Flex>\r\n      {stakingLimit && stakingLimit.gt(0) && (\r\n        <Flex mb=\"2px\" justifyContent=\"space-between\">\r\n          <Text small>{t('Max. stake per user')}:</Text>\r\n          <Text small>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\r\n        </Flex>\r\n      )}\r\n      {shouldShowBlockCountdown && (\r\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text small>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\r\n          {blocksRemaining || blocksUntilStart ? (\r\n            <Flex alignItems=\"center\">\r\n              <Link external href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}>\r\n                <Balance small value={blocksToDisplay} decimals={0} color=\"primary\" />\r\n                <Text small ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\r\n                  {t('Blocks')}\r\n                </Text>\r\n                <TimerIcon ml=\"4px\" color=\"primary\" />\r\n              </Link>\r\n            </Flex>\r\n          ) : (\r\n            <Skeleton width=\"54px\" height=\"21px\" />\r\n          )}\r\n        </Flex>\r\n      )}\r\n      {isAutoVault && (\r\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n          {tooltipVisible && tooltip}\r\n          <TooltipText ref={targetRef} small>\r\n            {t('Performance Fee')}\r\n          </TooltipText>\r\n          <Flex alignItems=\"center\">\r\n            <Text ml=\"4px\" small>\r\n              {performanceFee / 100}%\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n      )}\r\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n        <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false} small>\r\n          {t('See Token Info')}\r\n        </LinkExternal>\r\n      </Flex>\r\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n        <LinkExternal href={earningToken.projectLink} bold={false} small>\r\n          {t('View Project Site')}\r\n        </LinkExternal>\r\n      </Flex>\r\n      {poolContractAddress && (\r\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n          <LinkExternal\r\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\r\n            bold={false}\r\n            small\r\n          >\r\n            {t('View Contract')}\r\n          </LinkExternal>\r\n        </Flex>\r\n      )}\r\n      {account && isMetaMaskInScope && tokenAddress && (\r\n        <Flex justifyContent=\"flex-end\">\r\n          <Button\r\n            variant=\"text\"\r\n            p=\"0\"\r\n            height=\"auto\"\r\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals)}\r\n          >\r\n            <Text color=\"primary\" fontSize=\"14px\">\r\n              {t('Add to Metamask')}\r\n            </Text>\r\n            <MetamaskIcon ml=\"4px\" />\r\n          </Button>\r\n        </Flex>\r\n      )}\r\n    </ExpandedWrapper>\r\n  )\r\n}\r\n\r\nexport default React.memo(ExpandedFooter)\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip } from '@sphynxswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\r\nimport ExpandedFooter from './ExpandedFooter'\r\n\r\ninterface FooterProps {\r\n  pool: Pool\r\n  account: string\r\n}\r\n\r\nconst ExpandableButtonWrapper = styled(Flex)`\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  button {\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst CardFooterWrapper = styled(CardFooter)`\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n`\r\n\r\nconst Footer: React.FC<FooterProps> = ({ pool, account }) => {\r\n  const { isAutoVault } = pool\r\n  const { t } = useTranslation()\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n\r\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\r\n  const autoTooltipText = t(\r\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\r\n  )\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  const handleExpand = () => {\r\n    setIsExpanded(!isExpanded)\r\n  }\r\n\r\n  return (\r\n    <CardFooterWrapper>\r\n      <ExpandableButtonWrapper>\r\n        <Flex alignItems=\"center\">\r\n          {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\r\n          {tooltipVisible && tooltip}\r\n          <Flex ref={targetRef}>\r\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\r\n          </Flex>\r\n        </Flex>\r\n        <ExpandableLabel expanded={isExpanded} onClick={handleExpand}>\r\n          {isExpanded ? t('Hide') : t('Details')}\r\n        </ExpandableLabel>\r\n      </ExpandableButtonWrapper>\r\n      {isExpanded && <ExpandedFooter pool={pool} account={account} />}\r\n    </CardFooterWrapper>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport { TokenPairImage, ImageProps } from '@sphynxswap/uikit'\r\nimport tokens from 'config/constants/tokens'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\nconst CakeVaultTokenPairImage: React.FC<Omit<ImageProps, 'src'>> = (props) => {\r\n  const primaryTokenSrc = `/images/tokens/${getAddress(tokens.sphynx.address)}.svg`\r\n\r\n  return <TokenPairImage primarySrc={primaryTokenSrc} secondarySrc=\"/images/tokens/autorenew.svg\" {...props} />\r\n}\r\n\r\nexport default CakeVaultTokenPairImage\r\n","import React from 'react'\r\nimport { CardHeader, Heading, Text, Flex } from '@sphynxswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Token } from 'config/constants/types'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\nimport CakeVaultTokenPairImage from '../CakeVaultCard/CakeVaultTokenPairImage'\r\n\r\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string }>`\r\n  background: ${({ isFinished, background, theme }) =>\r\n    isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\r\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card} 0 0`};\r\n`\r\n\r\nconst StyledCardHeader: React.FC<{\r\n  earningToken: Token\r\n  stakingToken: Token\r\n  isAutoVault?: boolean\r\n  isFinished?: boolean\r\n  isStaking?: boolean\r\n}> = ({ earningToken, stakingToken, isFinished = false, isAutoVault = false, isStaking = false }) => {\r\n  const { t } = useTranslation()\r\n  const isCakePool = earningToken.symbol === 'SPHYNX' && stakingToken.symbol === 'SPHYNX'\r\n  const background = isStaking ? 'bubblegum' : 'cardHeader'\r\n\r\n  const getHeadingPrefix = () => {\r\n    if (isAutoVault) {\r\n      // vault\r\n      return t('Auto')\r\n    }\r\n    if (isCakePool) {\r\n      // manual cake\r\n      return t('Manual')\r\n    }\r\n    // all other pools\r\n    return t('Earn')\r\n  }\r\n\r\n  const getSubHeading = () => {\r\n    if (isAutoVault) {\r\n      return t('Automatic restaking')\r\n    }\r\n    if (isCakePool) {\r\n      return t('Earn SPHYNX, stake SPHYNX')\r\n    }\r\n    return t('Stake %symbol%', { symbol: stakingToken.symbol })\r\n  }\r\n\r\n  return (\r\n    <Wrapper isFinished={isFinished} background={background}>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Flex flexDirection=\"column\">\r\n          <Heading color={isFinished ? 'textDisabled' : 'body'} scale=\"lg\">\r\n            {`${getHeadingPrefix()} ${earningToken.symbol}`}\r\n          </Heading>\r\n          <Text color={isFinished ? 'textDisabled' : 'textSubtle'}>{getSubHeading()}</Text>\r\n        </Flex>\r\n        {isAutoVault ? (\r\n          <CakeVaultTokenPairImage width={64} height={64} />\r\n        ) : (\r\n          <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} width={64} height={64} />\r\n        )}\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default StyledCardHeader\r\n","import { useCallback, useState } from 'react'\r\nimport usePreviousValue from './usePreviousValue'\r\n\r\n/**\r\n * A helper hook to keep track of the time between events\r\n * Can also be used to force an effect to re-run\r\n */\r\nconst useLastUpdated = () => {\r\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\r\n  const previousLastUpdated = usePreviousValue(lastUpdated)\r\n\r\n  const setLastUpdated = useCallback(() => {\r\n    setStateLastUpdated(Date.now())\r\n  }, [setStateLastUpdated])\r\n\r\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\r\n}\r\n\r\nexport default useLastUpdated\r\n","import { useCallback, useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers, Contract } from 'ethers'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserAllowance } from 'state/actions'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCake, useSousChef, useCakeVaultContract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport useLastUpdated from 'hooks/useLastUpdated'\r\n\r\nexport const useApprovePool = (lpContract: Contract, sousId, earningTokenSymbol) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const tx = await lpContract.approve(sousChefContract.address, ethers.constants.MaxUint256)\r\n      const receipt = await tx.wait()\r\n\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      if (receipt.status) {\r\n        toastSuccess(\r\n          t('Contract Enabled'),\r\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\r\n        )\r\n        setRequestedApproval(false)\r\n      } else {\r\n        // user rejected tx or didn't go thru\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setRequestedApproval(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\n// Approve CAKE auto pool\r\nexport const useVaultApprove = (setLastUpdated: () => void) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const cakeContract = useCake()\r\n\r\n  const handleApprove = async () => {\r\n    const tx = await cakeContract.approve(cakeVaultContract.address, ethers.constants.MaxUint256)\r\n    setRequestedApproval(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\r\n      setLastUpdated()\r\n      setRequestedApproval(false)\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setRequestedApproval(false)\r\n    }\r\n  }\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\nexport const useCheckVaultApprovalStatus = () => {\r\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  useEffect(() => {\r\n    const checkApprovalStatus = async () => {\r\n      try {\r\n        const response = await cakeContract.allowance(account, cakeVaultContract.address)\r\n        const currentAllowance = new BigNumber(response.toString())\r\n        setIsVaultApproved(currentAllowance.gt(0))\r\n      } catch (error) {\r\n        setIsVaultApproved(false)\r\n      }\r\n    }\r\n\r\n    checkApprovalStatus()\r\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\r\n\r\n  return { isVaultApproved, setLastUpdated }\r\n}\r\n","import React from 'react'\r\nimport { Button, AutoRenewIcon, Skeleton } from '@sphynxswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { Pool } from 'state/types'\r\nimport { useApprovePool } from '../../../hooks/useApprove'\r\n\r\ninterface ApprovalActionProps {\r\n  pool: Pool\r\n  isLoading?: boolean\r\n}\r\n\r\nconst ApprovalAction: React.FC<ApprovalActionProps> = ({ pool, isLoading = false }) => {\r\n  const { sousId, stakingToken, earningToken } = pool\r\n  const { t } = useTranslation()\r\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\r\n  const { handleApprove, requestedApproval } = useApprovePool(stakingTokenContract, sousId, earningToken.symbol)\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Skeleton width=\"100%\" height=\"52px\" />\r\n      ) : (\r\n        <Button\r\n          isLoading={requestedApproval}\r\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          disabled={requestedApproval}\r\n          onClick={handleApprove}\r\n          width=\"100%\"\r\n        >\r\n          {t('Enable')}\r\n        </Button>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ApprovalAction\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@sphynxswap/uikit'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\ninterface NotEnoughTokensModalProps {\r\n  tokenSymbol: string\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n  width: 100%;\r\n`\r\n\r\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n\r\n  return (\r\n    <Modal\r\n      title={t('%symbol% required', { symbol: tokenSymbol })}\r\n      onDismiss={onDismiss}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      <Text color=\"failure\" bold>\r\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\r\n      </Text>\r\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\r\n      <Text>\r\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\r\n          symbol: tokenSymbol,\r\n        })}\r\n      </Text>\r\n      <Button mt=\"24px\" as=\"a\" external href=\"#/swap\">\r\n        {t('Buy')} {tokenSymbol}\r\n      </Button>\r\n      <StyledLink href=\"https://yieldwatch.net\" external>\r\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\r\n          {t('Locate Assets')}\r\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\r\n        </Button>\r\n      </StyledLink>\r\n      <Button variant=\"text\" onClick={onDismiss}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default NotEnoughTokensModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button } from '@sphynxswap/uikit'\r\n\r\ninterface PercentageButtonProps {\r\n  onClick: () => void\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  flex-grow: 1;\r\n`\r\n\r\nconst PercentageButton: React.FC<PercentageButtonProps> = ({ children, onClick }) => {\r\n  return (\r\n    <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={onClick}>\r\n      {children}\r\n    </StyledButton>\r\n  )\r\n}\r\n\r\nexport default PercentageButton\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stakeFarm } from 'utils/calls'\r\nimport BigNumber from 'bignumber.js'\r\nimport { DEFAULT_TOKEN_DECIMAL, DEFAULT_GAS_LIMIT } from 'config'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\r\n\r\nconst options = {\r\n  gasLimit: DEFAULT_GAS_LIMIT,\r\n}\r\n\r\nconst sousStake = async (sousChefContract, amount, decimals = 18) => {\r\n  const tx = await sousChefContract.deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString(), options)\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst sousStakeBnb = async (sousChefContract, amount) => {\r\n  const tx = await sousChefContract.deposit(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(), options)\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst useStakePool = (sousId: number, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await stakeFarm(masterChefContract, 0, amount)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, decimals)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStakePool\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { unstakeFarm } from 'utils/calls'\r\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\n\r\nconst sousUnstake = async (sousChefContract, amount, decimals) => {\r\n  const tx = await sousChefContract.withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst sousEmergencyUnstake = async (sousChefContract) => {\r\n  const tx = await sousChefContract.emergencyWithdraw()\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst useUnstakePool = (sousId, enableEmergencyWithdraw = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await unstakeFarm(masterChefContract, 0, amount)\r\n      } else if (enableEmergencyWithdraw) {\r\n        await sousEmergencyUnstake(sousChefContract)\r\n      } else {\r\n        await sousUnstake(sousChefContract, amount, decimals)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakePool\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon, Link } from '@sphynxswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useToast from 'hooks/useToast'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\r\nimport { Pool } from 'state/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport PercentageButton from './PercentageButton'\r\nimport useStakePool from '../../../hooks/useStakePool'\r\nimport useUnstakePool from '../../../hooks/useUnstakePool'\r\n\r\ninterface StakeModalProps {\r\n  isBnbPool: boolean\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  stakingTokenPrice: number\r\n  isRemovingStake?: boolean\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n  width: 100%;\r\n`\r\n\r\nconst StakeModal: React.FC<StakeModalProps> = ({\r\n  isBnbPool,\r\n  pool,\r\n  stakingTokenBalance,\r\n  stakingTokenPrice,\r\n  isRemovingStake = false,\r\n  onDismiss,\r\n}) => {\r\n  const { sousId, stakingToken, userData, stakingLimit, earningToken } = pool\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { onStake } = useStakePool(sousId, isBnbPool)\r\n  const { onUnstake } = useUnstakePool(sousId, pool.enableEmergencyWithdraw)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [stakeAmount, setStakeAmount] = useState('')\r\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\r\n  const [percent, setPercent] = useState(0)\r\n  const getCalculatedStakingLimit = () => {\r\n    if (isRemovingStake) {\r\n      return userData.stakedBalance\r\n    }\r\n    return stakingLimit.gt(0) && stakingTokenBalance.gt(stakingLimit) ? stakingLimit : stakingTokenBalance\r\n  }\r\n\r\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\r\n\r\n  useEffect(() => {\r\n    if (stakingLimit.gt(0) && !isRemovingStake) {\r\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\r\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\r\n    }\r\n  }, [stakeAmount, stakingLimit, userData, stakingToken, isRemovingStake, setHasReachedStakedLimit])\r\n\r\n  const handleStakeInputChange = (input: string) => {\r\n    if (input) {\r\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\r\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\r\n      setPercent(Math.min(percentage, 100))\r\n    } else {\r\n      setPercent(0)\r\n    }\r\n    setStakeAmount(input)\r\n  }\r\n\r\n  const handleChangePercent = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\r\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\r\n      setStakeAmount(amountToStake)\r\n    } else {\r\n      setStakeAmount('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  const handleConfirmClick = async () => {\r\n    setPendingTx(true)\r\n\r\n    if (isRemovingStake) {\r\n      // unstaking\r\n      try {\r\n        await onUnstake(stakeAmount, stakingToken.decimals)\r\n        toastSuccess(\r\n          `${t('Unstaked')}!`,\r\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\r\n            symbol: earningToken.symbol,\r\n          }),\r\n        )\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setPendingTx(false)\r\n      }\r\n    } else {\r\n      try {\r\n        // staking\r\n        await onStake(stakeAmount, stakingToken.decimals)\r\n        toastSuccess(\r\n          `${t('Staked')}!`,\r\n          t('Your %symbol% funds have been staked in the pool!', {\r\n            symbol: stakingToken.symbol,\r\n          }),\r\n        )\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setPendingTx(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\r\n      onDismiss={onDismiss}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      {stakingLimit.gt(0) && !isRemovingStake && (\r\n        <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\r\n          {t('Max stake for this pool: %amount% %token%', {\r\n            amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\r\n            token: stakingToken.symbol,\r\n          })}\r\n        </Text>\r\n      )}\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\r\n        <Flex alignItems=\"center\" minWidth=\"70px\">\r\n          <Image\r\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\r\n            width={24}\r\n            height={24}\r\n            alt={stakingToken.symbol}\r\n          />\r\n          <Text ml=\"4px\" bold>\r\n            {stakingToken.symbol}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <BalanceInput\r\n        value={stakeAmount}\r\n        onUserInput={handleStakeInputChange}\r\n        currencyValue={stakingTokenPrice !== 0 && `~${usdValueStaked || 0} USD`}\r\n        isWarning={hasReachedStakeLimit}\r\n        decimals={stakingToken.decimals}\r\n      />\r\n      {hasReachedStakeLimit && (\r\n        <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\r\n          {t('Maximum total stake: %amount% %token%', {\r\n            amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\r\n            token: stakingToken.symbol,\r\n          })}\r\n        </Text>\r\n      )}\r\n      <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n        {t('Balance: %balance%', {\r\n          balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\r\n        })}\r\n      </Text>\r\n      <Slider\r\n        min={0}\r\n        max={100}\r\n        value={percent}\r\n        onValueChanged={handleChangePercent}\r\n        name=\"stake\"\r\n        valueLabel={`${percent}%`}\r\n        step={1}\r\n      />\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\r\n        <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\r\n        <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\r\n        <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\r\n        <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\r\n      </Flex>\r\n      <Button\r\n        isLoading={pendingTx}\r\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        onClick={handleConfirmClick}\r\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit}\r\n        mt=\"24px\"\r\n      >\r\n        {pendingTx ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n      {!isRemovingStake && (\r\n        <StyledLink external href=\"#/swap\">\r\n          <Button width=\"100%\" mt=\"8px\" variant=\"secondary\">\r\n            {t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n          </Button>\r\n        </StyledLink>\r\n      )}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default StakeModal\r\n","import React from 'react'\r\nimport { Flex, Text, Button, IconButton, AddIcon, MinusIcon, useModal, Skeleton, useTooltip } from '@sphynxswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Pool } from 'state/types'\r\nimport Balance from 'components/Balance'\r\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\r\nimport StakeModal from '../Modals/StakeModal'\r\n\r\ninterface StakeActionsProps {\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  stakedBalance: BigNumber\r\n  isBnbPool: boolean\r\n  isStaked: ConstrainBoolean\r\n  isLoading?: boolean\r\n}\r\n\r\nconst StakeAction: React.FC<StakeActionsProps> = ({\r\n  pool,\r\n  stakingTokenBalance,\r\n  stakedBalance,\r\n  isBnbPool,\r\n  isStaked,\r\n  isLoading = false,\r\n}) => {\r\n  const { stakingToken, stakingTokenPrice, stakingLimit, isFinished, userData } = pool\r\n  const { t } = useTranslation()\r\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\r\n  const stakedTokenDollarBalance = getBalanceNumber(\r\n    stakedBalance.multipliedBy(stakingTokenPrice),\r\n    stakingToken.decimals,\r\n  )\r\n\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n\r\n  const [onPresentStake] = useModal(\r\n    <StakeModal\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n    />,\r\n  )\r\n\r\n  const [onPresentUnstake] = useModal(\r\n    <StakeModal\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n      isRemovingStake\r\n    />,\r\n  )\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('You’ve already staked the maximum amount you can stake in this pool!'),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\r\n\r\n  const renderStakeAction = () => {\r\n    return isStaked ? (\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Flex flexDirection=\"column\">\r\n          <>\r\n            <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\r\n            {stakingTokenPrice !== 0 && (\r\n              <Text fontSize=\"12px\" color=\"textSubtle\">\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={stakedTokenDollarBalance}\r\n                  prefix=\"~\"\r\n                  unit=\" USD\"\r\n                />\r\n              </Text>\r\n            )}\r\n          </>\r\n        </Flex>\r\n        <Flex>\r\n          <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\r\n            <MinusIcon color=\"primary\" width=\"24px\" />\r\n          </IconButton>\r\n          {reachStakingLimit ? (\r\n            <span ref={targetRef}>\r\n              <IconButton variant=\"secondary\" disabled>\r\n                <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\r\n              </IconButton>\r\n            </span>\r\n          ) : (\r\n            <IconButton\r\n              variant=\"secondary\"\r\n              onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\r\n              disabled={isFinished}\r\n            >\r\n              <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\r\n            </IconButton>\r\n          )}\r\n        </Flex>\r\n        {tooltipVisible && tooltip}\r\n      </Flex>\r\n    ) : (\r\n      <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\r\n        {t('Stake')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\r\n}\r\n\r\nexport default StakeAction\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\r\nimport { DEFAULT_GAS_LIMIT } from 'config'\r\n\r\nconst options = {\r\n  gasLimit: DEFAULT_GAS_LIMIT,\r\n}\r\n\r\nconst harvestPool = async (sousChefContract) => {\r\n  const tx = await sousChefContract.deposit('0', options)\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst harvestPoolBnb = async (sousChefContract) => {\r\n  const tx = await sousChefContract.deposit({ ...options, value: BIG_ZERO })\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst useHarvestPool = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvestFarm(masterChefContract, 0)\r\n    } else if (isUsingBnb) {\r\n      await harvestPoolBnb(sousChefContract)\r\n    } else {\r\n      await harvestPool(sousChefContract)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport default useHarvestPool\r\n","import React, { useState } from 'react'\r\nimport {\r\n  Modal,\r\n  Text,\r\n  Button,\r\n  Heading,\r\n  Flex,\r\n  AutoRenewIcon,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n  HelpIcon,\r\n  useTooltip,\r\n} from '@sphynxswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useToast from 'hooks/useToast'\r\nimport { Token } from 'config/constants/types'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport useHarvestPool from '../../../hooks/useHarvestPool'\r\nimport useStakePool from '../../../hooks/useStakePool'\r\n\r\ninterface CollectModalProps {\r\n  formattedBalance: string\r\n  fullBalance: string\r\n  earningToken: Token\r\n  earningsDollarValue: number\r\n  sousId: number\r\n  isBnbPool: boolean\r\n  isCompoundPool?: boolean\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst CollectModal: React.FC<CollectModalProps> = ({\r\n  formattedBalance,\r\n  fullBalance,\r\n  earningToken,\r\n  earningsDollarValue,\r\n  sousId,\r\n  isBnbPool,\r\n  isCompoundPool = false,\r\n  onDismiss,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { onReward } = useHarvestPool(sousId, isBnbPool)\r\n  const { onStake } = useStakePool(sousId, isBnbPool)\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [shouldCompound, setShouldCompound] = useState(isCompoundPool)\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Text mb=\"12px\">{t('Compound: collect and restake CAKE into pool.')}</Text>\r\n      <Text>{t('Harvest: collect CAKE and send to wallet')}</Text>\r\n    </>,\r\n    { placement: 'bottom-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  const handleHarvestConfirm = async () => {\r\n    setPendingTx(true)\r\n    // compounding\r\n    if (shouldCompound) {\r\n      try {\r\n        await onStake(fullBalance, earningToken.decimals)\r\n        toastSuccess(\r\n          `${t('Compounded')}!`,\r\n          t('Your %symbol% earnings have been re-invested into the pool!', { symbol: earningToken.symbol }),\r\n        )\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        console.error(e)\r\n        setPendingTx(false)\r\n      }\r\n    } else {\r\n      // harvesting\r\n      try {\r\n        await onReward()\r\n        toastSuccess(\r\n          `${t('Harvested')}!`,\r\n          t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\r\n        )\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        console.error(e)\r\n        setPendingTx(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={`${earningToken.symbol} ${isCompoundPool ? t('Collect') : t('Harvest')}`}\r\n      onDismiss={onDismiss}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      {isCompoundPool && (\r\n        <Flex justifyContent=\"center\" alignItems=\"center\" mb=\"24px\">\r\n          <ButtonMenu\r\n            activeIndex={shouldCompound ? 0 : 1}\r\n            scale=\"sm\"\r\n            variant=\"subtle\"\r\n            onItemClick={(index) => setShouldCompound(!index)}\r\n          >\r\n            <ButtonMenuItem as=\"button\">{t('Compound')}</ButtonMenuItem>\r\n            <ButtonMenuItem as=\"button\">{t('Harvest')}</ButtonMenuItem>\r\n          </ButtonMenu>\r\n          <Flex ml=\"10px\" ref={targetRef}>\r\n            <HelpIcon color=\"textSubtle\" />\r\n          </Flex>\r\n          {tooltipVisible && tooltip}\r\n        </Flex>\r\n      )}\r\n\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\r\n        <Text>{shouldCompound ? t('Compounding') : t('Harvesting')}:</Text>\r\n        <Flex flexDirection=\"column\">\r\n          <Heading>\r\n            {formattedBalance} {earningToken.symbol}\r\n          </Heading>\r\n          {earningsDollarValue > 0 && (\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">{`~${formatNumber(earningsDollarValue)} USD`}</Text>\r\n          )}\r\n        </Flex>\r\n      </Flex>\r\n\r\n      <Button\r\n        mt=\"8px\"\r\n        onClick={handleHarvestConfirm}\r\n        isLoading={pendingTx}\r\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n      >\r\n        {pendingTx ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n      <Button variant=\"text\" onClick={onDismiss} pb=\"0px\">\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CollectModal\r\n","import React from 'react'\r\nimport { Flex, Text, Button, Heading, useModal, Skeleton } from '@sphynxswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Token } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance, getBalanceNumber, formatNumber } from 'utils/formatBalance'\r\nimport Balance from 'components/Balance'\r\nimport CollectModal from '../Modals/CollectModal'\r\n\r\ninterface HarvestActionsProps {\r\n  earnings: BigNumber\r\n  earningToken: Token\r\n  sousId: number\r\n  earningTokenPrice: number\r\n  isBnbPool: boolean\r\n  isLoading?: boolean\r\n}\r\n\r\nconst HarvestActions: React.FC<HarvestActionsProps> = ({\r\n  earnings,\r\n  earningToken,\r\n  sousId,\r\n  isBnbPool,\r\n  earningTokenPrice,\r\n  isLoading = false,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\r\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\r\n\r\n  const earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\r\n\r\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\r\n  const hasEarnings = earnings.toNumber() > 0\r\n  const isCompoundPool = sousId === 0\r\n\r\n  const [onPresentCollect] = useModal(\r\n    <CollectModal\r\n      formattedBalance={formattedBalance}\r\n      fullBalance={fullBalance}\r\n      earningToken={earningToken}\r\n      earningsDollarValue={earningTokenDollarBalance}\r\n      sousId={sousId}\r\n      isBnbPool={isBnbPool}\r\n      isCompoundPool={isCompoundPool}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\r\n      <Flex flexDirection=\"column\">\r\n        {isLoading ? (\r\n          <Skeleton width=\"80px\" height=\"48px\" />\r\n        ) : (\r\n          <>\r\n            {hasEarnings ? (\r\n              <>\r\n                <Balance bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\r\n                {earningTokenPrice > 0 && (\r\n                  <Balance\r\n                    display=\"inline\"\r\n                    fontSize=\"12px\"\r\n                    color=\"textSubtle\"\r\n                    decimals={2}\r\n                    prefix=\"~\"\r\n                    value={earningTokenDollarBalance}\r\n                    unit=\" USD\"\r\n                  />\r\n                )}\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Heading color=\"textDisabled\">0</Heading>\r\n                <Text fontSize=\"12px\" color=\"textDisabled\">\r\n                  0 USD\r\n                </Text>\r\n              </>\r\n            )}\r\n          </>\r\n        )}\r\n      </Flex>\r\n      <Button disabled={!hasEarnings} onClick={onPresentCollect}>\r\n        {isCompoundPool ? t('Collect') : t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestActions\r\n","import BigNumber from 'bignumber.js'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { Flex, Text, Box } from '@sphynxswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { Pool } from 'state/types'\r\nimport ApprovalAction from './ApprovalAction'\r\nimport StakeActions from './StakeActions'\r\nimport HarvestActions from './HarvestActions'\r\n\r\nconst InlineText = styled(Text)`\r\n  display: inline;\r\n`\r\n\r\ninterface CardActionsProps {\r\n  pool: Pool\r\n  stakedBalance: BigNumber\r\n}\r\n\r\nconst CardActions: React.FC<CardActionsProps> = ({ pool, stakedBalance }) => {\r\n  const { sousId, stakingToken, earningToken, harvest, poolCategory, userData, earningTokenPrice } = pool\r\n  // Pools using native BNB behave differently than pools using a token\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n  const { t } = useTranslation()\r\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\r\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\r\n  const needsApproval = !allowance.gt(0) && !isBnbPool\r\n  const isStaked = stakedBalance.gt(0)\r\n  const isLoading = !userData\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Flex flexDirection=\"column\">\r\n        {harvest && (\r\n          <>\r\n            <Box display=\"inline\">\r\n              <InlineText color=\"secondary\" textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n                {`${earningToken.symbol} `}\r\n              </InlineText>\r\n              <InlineText color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n                {t('Earned')}\r\n              </InlineText>\r\n            </Box>\r\n            <HarvestActions\r\n              earnings={earnings}\r\n              earningToken={earningToken}\r\n              sousId={sousId}\r\n              earningTokenPrice={earningTokenPrice}\r\n              isBnbPool={isBnbPool}\r\n              isLoading={isLoading}\r\n            />\r\n          </>\r\n        )}\r\n        <Box display=\"inline\">\r\n          <InlineText color={isStaked ? 'secondary' : 'textSubtle'} textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n            {isStaked ? stakingToken.symbol : t('Stake')}{' '}\r\n          </InlineText>\r\n          <InlineText color={isStaked ? 'textSubtle' : 'secondary'} textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n            {isStaked ? t('Staked') : `${stakingToken.symbol}`}\r\n          </InlineText>\r\n        </Box>\r\n        {needsApproval ? (\r\n          <ApprovalAction pool={pool} isLoading={isLoading} />\r\n        ) : (\r\n          <StakeActions\r\n            isLoading={isLoading}\r\n            pool={pool}\r\n            stakingTokenBalance={stakingTokenBalance}\r\n            stakedBalance={stakedBalance}\r\n            isBnbPool={isBnbPool}\r\n            isStaked={isStaked}\r\n          />\r\n        )}\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport React from 'react'\r\nimport { CardBody, Flex, Text, CardRibbon } from '@sphynxswap/uikit'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { Pool } from 'state/types'\r\nimport AprRow from './AprRow'\r\nimport { StyledCard } from './StyledCard'\r\nimport CardFooter from './CardFooter'\r\nimport StyledCardHeader from './StyledCardHeader'\r\nimport CardActions from './CardActions'\r\n\r\nconst StyledCardBody = styled(CardBody)`\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n`\r\n\r\nconst PoolCard: React.FC<{ pool: Pool; account: string }> = ({ pool, account }) => {\r\n  const { sousId, stakingToken, earningToken, isFinished, userData } = pool\r\n  const { t } = useTranslation()\r\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n  const accountHasStakedBalance = stakedBalance.gt(0)\r\n\r\n  return (\r\n    <StyledCard\r\n      isFinished={isFinished && sousId !== 0}\r\n      ribbon={isFinished && <CardRibbon variantColor=\"textDisabled\" text={t('Finished')} />}\r\n    >\r\n      <StyledCardHeader\r\n        isStaking={accountHasStakedBalance}\r\n        earningToken={earningToken}\r\n        stakingToken={stakingToken}\r\n        isFinished={isFinished && sousId !== 0}\r\n      />\r\n      <StyledCardBody>\r\n        <AprRow pool={pool} />\r\n        <Flex mt=\"24px\" flexDirection=\"column\">\r\n          {account ? (\r\n            <CardActions pool={pool} stakedBalance={stakedBalance} />\r\n          ) : (\r\n            <>\r\n              <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\r\n                {t('Start earning')}\r\n              </Text>\r\n              <ConnectWalletButton />\r\n            </>\r\n          )}\r\n        </Flex>\r\n      </StyledCardBody>\r\n      <CardFooter pool={pool} account={account} />\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default PoolCard\r\n","import React from 'react'\r\nimport { Button, AutoRenewIcon, Skeleton } from '@sphynxswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useVaultApprove } from '../../../hooks/useApprove'\r\n\r\ninterface ApprovalActionProps {\r\n  setLastUpdated: () => void\r\n  isLoading?: boolean\r\n}\r\n\r\nconst VaultApprovalAction: React.FC<ApprovalActionProps> = ({ isLoading = false, setLastUpdated }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const { handleApprove, requestedApproval } = useVaultApprove(setLastUpdated)\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Skeleton width=\"100%\" height=\"52px\" />\r\n      ) : (\r\n        <Button\r\n          isLoading={requestedApproval}\r\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          disabled={requestedApproval}\r\n          onClick={handleApprove}\r\n          width=\"100%\"\r\n        >\r\n          {t('Enable')}\r\n        </Button>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default VaultApprovalAction\r\n","import BigNumber from 'bignumber.js'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst useWithdrawalFeeTimer = (lastDepositedTime: number, userShares: BigNumber, withdrawalFeePeriod = 259200) => {\r\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\r\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false)\r\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000))\r\n\r\n  useEffect(() => {\r\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod\r\n    const secondsRemainingCalc = feeEndTime - currentSeconds\r\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0\r\n\r\n    const tick = () => {\r\n      setCurrentSeconds((prevSeconds) => prevSeconds + 1)\r\n    }\r\n    const timerInterval = setInterval(() => tick(), 1000)\r\n    if (doesUnstakingFeeApply) {\r\n      setSecondsRemaining(secondsRemainingCalc)\r\n      setHasUnstakingFee(true)\r\n    } else {\r\n      setHasUnstakingFee(false)\r\n      clearInterval(timerInterval)\r\n    }\r\n\r\n    return () => clearInterval(timerInterval)\r\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares])\r\n\r\n  return { hasUnstakingFee, secondsRemaining }\r\n}\r\n\r\nexport default useWithdrawalFeeTimer\r\n","const MINUTE_IN_SECONDS = 60\r\nconst HOUR_IN_SECONDS = 3600\r\nconst DAY_IN_SECONDS = 86400\r\nconst MONTH_IN_SECONDS = 2629800\r\nconst YEAR_IN_SECONDS = 31557600\r\n\r\n/**\r\n * Format number of seconds into year, month, day, hour, minute, seconds\r\n *\r\n * @param seconds\r\n */\r\nconst getTimePeriods = (seconds: number) => {\r\n  let delta = Math.abs(seconds)\r\n  const timeLeft = {\r\n    years: 0,\r\n    months: 0,\r\n    days: 0,\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n  }\r\n\r\n  if (delta >= YEAR_IN_SECONDS) {\r\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\r\n    delta -= timeLeft.years * YEAR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MONTH_IN_SECONDS) {\r\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\r\n    delta -= timeLeft.months * MONTH_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= DAY_IN_SECONDS) {\r\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\r\n    delta -= timeLeft.days * DAY_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= HOUR_IN_SECONDS) {\r\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\r\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MINUTE_IN_SECONDS) {\r\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\r\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\r\n  }\r\n\r\n  timeLeft.seconds = delta\r\n\r\n  return timeLeft\r\n}\r\n\r\nexport default getTimePeriods\r\n","import React from 'react'\r\nimport { Text } from '@sphynxswap/uikit'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst WithdrawalFeeTimer: React.FC<{ secondsRemaining: number }> = ({ secondsRemaining }) => {\r\n  const { t } = useTranslation()\r\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\r\n\r\n  return <Text fontSize=\"14px\">{t('%day%d : %hour%h : %minute%m', { day: days, hour: hours, minute: minutes })}</Text>\r\n}\r\n\r\nexport default WithdrawalFeeTimer\r\n","import React from 'react'\r\nimport { Flex, Text, TooltipText, useTooltip } from '@sphynxswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\r\n\r\ninterface UnstakingFeeCountdownRowProps {\r\n  isTableVariant?: boolean\r\n}\r\n\r\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    userData: { lastDepositedTime, userShares },\r\n    fees: { withdrawalFee, withdrawalFeePeriod },\r\n  } = useCakeVault()\r\n  const feeAsDecimal = withdrawalFee / 100 || '-'\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Text bold mb=\"4px\">\r\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\r\n      </Text>\r\n      <Text>\r\n        {t(\r\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new SPHYNX in the pool.',\r\n        )}\r\n      </Text>\r\n    </>,\r\n    { placement: 'bottom-start' },\r\n  )\r\n\r\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\r\n    parseInt(lastDepositedTime, 10),\r\n    userShares,\r\n    withdrawalFeePeriod,\r\n  )\r\n\r\n  // The user has made a deposit, but has no fee\r\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\r\n\r\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\r\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\r\n\r\n  const getRowText = () => {\r\n    if (noFeeToPay) {\r\n      return t('Unstaking Fee').toLowerCase()\r\n    }\r\n    if (shouldShowTimer) {\r\n      return t('unstaking fee until')\r\n    }\r\n    return t('unstaking fee if withdrawn within 72h')\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\r\n      justifyContent=\"space-between\"\r\n      flexDirection={isTableVariant ? 'column' : 'row'}\r\n    >\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef} small>\r\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\r\n      </TooltipText>\r\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default UnstakingFeeCountdownRow\r\n","import React from 'react'\r\nimport { Text, Flex, useTooltip, TooltipText } from '@sphynxswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\r\n\r\ninterface FeeSummaryProps {\r\n  stakingTokenSymbol: string\r\n  stakeAmount: string\r\n}\r\n\r\nconst FeeSummary: React.FC<FeeSummaryProps> = ({ stakingTokenSymbol, stakeAmount }) => {\r\n  const { t } = useTranslation()\r\n  const {\r\n    fees: { withdrawalFee },\r\n  } = useCakeVault()\r\n  const feeAsDecimal = withdrawalFee / 100\r\n  const feeInCake = (parseFloat(stakeAmount) * (feeAsDecimal / 100)).toFixed(4)\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Text bold mb=\"4px\">\r\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\r\n      </Text>\r\n      <Text>\r\n        {t(\r\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new SPHYNX in the pool.',\r\n        )}\r\n      </Text>\r\n    </>,\r\n    { placement: 'top-start' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\r\n        {tooltipVisible && tooltip}\r\n        <TooltipText ref={targetRef} small>\r\n          {t('Unstaking Fee')}\r\n        </TooltipText>\r\n        <Text fontSize=\"14px\">\r\n          {stakeAmount ? feeInCake : '-'} {stakingTokenSymbol}\r\n        </Text>\r\n      </Flex>\r\n      <UnstakingFeeCountdownRow />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FeeSummary\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@sphynxswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { useCakeVaultContract } from 'hooks/useContract'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { fetchCakeVaultUserData } from 'state/pools'\r\nimport { Pool } from 'state/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { convertCakeToShares } from '../../helpers'\r\nimport FeeSummary from './FeeSummary'\r\n\r\ninterface VaultStakeModalProps {\r\n  pool: Pool\r\n  stakingMax: BigNumber\r\n  isRemovingStake?: boolean\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  flex-grow: 1;\r\n`\r\n\r\nconst callOptions = {\r\n  gasLimit: 380000,\r\n}\r\n\r\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({ pool, stakingMax, isRemovingStake = false, onDismiss }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { stakingToken } = pool\r\n  const { account } = useWeb3React()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const {\r\n    userData: { lastDepositedTime, userShares },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [stakeAmount, setStakeAmount] = useState('')\r\n  const [percent, setPercent] = useState(0)\r\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const usdValueStaked =\r\n    cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : ''\r\n\r\n  const handleStakeInputChange = (input: string) => {\r\n    if (input) {\r\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\r\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\r\n      setPercent(percentage > 100 ? 100 : percentage)\r\n    } else {\r\n      setPercent(0)\r\n    }\r\n    setStakeAmount(input)\r\n  }\r\n\r\n  const handleChangePercent = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\r\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\r\n      setStakeAmount(amountToStake)\r\n    } else {\r\n      setStakeAmount('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\r\n    setPendingTx(true)\r\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\r\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\r\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\r\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\r\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\r\n\r\n    if (isWithdrawingAll) {\r\n      try {\r\n        const tx = await cakeVaultContract.withdrawAll(callOptions)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n          setPendingTx(false)\r\n          onDismiss()\r\n          dispatch(fetchCakeVaultUserData({ account }))\r\n        }\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setPendingTx(false)\r\n      }\r\n    } else {\r\n      // .toString() being called to fix a BigNumber error in prod\r\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\r\n      try {\r\n        const tx = await cakeVaultContract.withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString(), callOptions)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n          setPendingTx(false)\r\n          onDismiss()\r\n          dispatch(fetchCakeVaultUserData({ account }))\r\n        }\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setPendingTx(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\r\n    setPendingTx(true)\r\n    try {\r\n      // .toString() being called to fix a BigNumber error in prod\r\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\r\n      const tx = await cakeVaultContract.deposit(convertedStakeAmount.toString(), callOptions)\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\r\n        setPendingTx(false)\r\n        onDismiss()\r\n        dispatch(fetchCakeVaultUserData({ account }))\r\n      }\r\n    } catch (error) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  const handleConfirmClick = async () => {\r\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\r\n    if (isRemovingStake) {\r\n      // unstaking\r\n      handleWithdrawal(convertedStakeAmount)\r\n    } else {\r\n      // staking\r\n      handleDeposit(convertedStakeAmount)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\r\n      onDismiss={onDismiss}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\r\n        <Flex alignItems=\"center\" minWidth=\"70px\">\r\n          <Image\r\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\r\n            width={24}\r\n            height={24}\r\n            alt={stakingToken.symbol}\r\n          />\r\n          <Text ml=\"4px\" bold>\r\n            {stakingToken.symbol}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <BalanceInput\r\n        value={stakeAmount}\r\n        onUserInput={handleStakeInputChange}\r\n        currencyValue={cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`}\r\n        decimals={stakingToken.decimals}\r\n      />\r\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\r\n      </Text>\r\n      <Slider\r\n        min={0}\r\n        max={100}\r\n        value={percent}\r\n        onValueChanged={handleChangePercent}\r\n        name=\"stake\"\r\n        valueLabel={`${percent}%`}\r\n        step={1}\r\n      />\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\r\n          25%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\r\n          50%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\r\n          75%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\r\n          {t('Max')}\r\n        </StyledButton>\r\n      </Flex>\r\n      {isRemovingStake && hasUnstakingFee && (\r\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\r\n      )}\r\n      <Button\r\n        isLoading={pendingTx}\r\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        onClick={handleConfirmClick}\r\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\r\n        mt=\"24px\"\r\n      >\r\n        {pendingTx ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n      {!isRemovingStake && (\r\n        <Button mt=\"8px\" as=\"a\" external href=\"#/swap\" variant=\"secondary\">\r\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n        </Button>\r\n      )}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default VaultStakeModal\r\n","import React from 'react'\r\nimport { Flex, Text, IconButton, AddIcon, MinusIcon, useModal, Skeleton } from '@sphynxswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Pool } from 'state/types'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport Balance from 'components/Balance'\r\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\r\nimport { convertSharesToCake } from '../../../helpers'\r\nimport VaultStakeModal from '../VaultStakeModal'\r\n\r\ninterface HasStakeActionProps {\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n}\r\n\r\nconst HasSharesActions: React.FC<HasStakeActionProps> = ({ pool, stakingTokenBalance }) => {\r\n  const {\r\n    userData: { userShares },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { stakingToken } = pool\r\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const stakedDollarValue = cakePriceBusd.gt(0)\r\n    ? getBalanceNumber(cakeAsBigNumber.multipliedBy(cakePriceBusd), stakingToken.decimals)\r\n    : 0\r\n\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\r\n  const [onPresentUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\">\r\n        <Balance fontSize=\"20px\" bold value={cakeAsNumberBalance} decimals={5} />\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          {cakePriceBusd.gt(0) ? (\r\n            <Balance value={stakedDollarValue} fontSize=\"12px\" color=\"textSubtle\" decimals={2} prefix=\"~\" unit=\" USD\" />\r\n          ) : (\r\n            <Skeleton mt=\"1px\" height={16} width={64} />\r\n          )}\r\n        </Text>\r\n      </Flex>\r\n      <Flex>\r\n        <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"24px\" />\r\n        </IconButton>\r\n        <IconButton variant=\"secondary\" onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\r\n          <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\r\n        </IconButton>\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HasSharesActions\r\n","import React from 'react'\r\nimport { Flex, Button, useModal, Skeleton } from '@sphynxswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Pool } from 'state/types'\r\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\r\nimport VaultStakeModal from '../VaultStakeModal'\r\nimport HasSharesActions from './HasSharesActions'\r\n\r\ninterface VaultStakeActionsProps {\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  accountHasSharesStaked: boolean\r\n  isLoading?: boolean\r\n}\r\n\r\nconst VaultStakeActions: React.FC<VaultStakeActionsProps> = ({\r\n  pool,\r\n  stakingTokenBalance,\r\n  accountHasSharesStaked,\r\n  isLoading = false,\r\n}) => {\r\n  const { stakingToken } = pool\r\n  const { t } = useTranslation()\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\r\n\r\n  const renderStakeAction = () => {\r\n    return accountHasSharesStaked ? (\r\n      <HasSharesActions pool={pool} stakingTokenBalance={stakingTokenBalance} />\r\n    ) : (\r\n      <Button onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>{t('Stake')}</Button>\r\n    )\r\n  }\r\n\r\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\r\n}\r\n\r\nexport default VaultStakeActions\r\n","import BigNumber from 'bignumber.js'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, Box } from '@sphynxswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Pool } from 'state/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport VaultApprovalAction from './VaultApprovalAction'\r\nimport VaultStakeActions from './VaultStakeActions'\r\nimport { useCheckVaultApprovalStatus } from '../../../hooks/useApprove'\r\n\r\nconst InlineText = styled(Text)`\r\n  display: inline;\r\n`\r\n\r\nconst CakeVaultCardActions: React.FC<{\r\n  pool: Pool\r\n  accountHasSharesStaked: boolean\r\n  isLoading: boolean\r\n}> = ({ pool, accountHasSharesStaked, isLoading }) => {\r\n  const { stakingToken, userData } = pool\r\n  const { t } = useTranslation()\r\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n\r\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Flex flexDirection=\"column\">\r\n        <Box display=\"inline\">\r\n          <InlineText\r\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\r\n            textTransform=\"uppercase\"\r\n            bold\r\n            fontSize=\"12px\"\r\n          >\r\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\r\n          </InlineText>\r\n          <InlineText\r\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\r\n            textTransform=\"uppercase\"\r\n            bold\r\n            fontSize=\"12px\"\r\n          >\r\n            {accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`}\r\n          </InlineText>\r\n        </Box>\r\n        {isVaultApproved ? (\r\n          <VaultStakeActions\r\n            isLoading={isLoading}\r\n            pool={pool}\r\n            stakingTokenBalance={stakingTokenBalance}\r\n            accountHasSharesStaked={accountHasSharesStaked}\r\n          />\r\n        ) : (\r\n          <VaultApprovalAction isLoading={isLoading} setLastUpdated={setLastUpdated} />\r\n        )}\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default CakeVaultCardActions\r\n","import React from 'react'\r\nimport { Text, TooltipText, useTooltip } from '@sphynxswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\n\r\ninterface RecentCakeProfitBalanceProps {\r\n  cakeToDisplay: number\r\n  dollarValueToDisplay: number\r\n  dateStringToDisplay: string\r\n}\r\n\r\nconst RecentCakeProfitBalance: React.FC<RecentCakeProfitBalanceProps> = ({\r\n  cakeToDisplay,\r\n  dollarValueToDisplay,\r\n  dateStringToDisplay,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Balance fontSize=\"16px\" value={cakeToDisplay} decimals={3} bold unit=\" CAKE\" />\r\n      <Balance fontSize=\"16px\" value={dollarValueToDisplay} decimals={2} bold prefix=\"~$\" />\r\n      {t('Earned since your last action')}\r\n      <Text>{dateStringToDisplay}</Text>\r\n    </>,\r\n    {\r\n      placement: 'bottom-end',\r\n    },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef} small>\r\n        <Balance fontSize=\"14px\" value={cakeToDisplay} />\r\n      </TooltipText>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RecentCakeProfitBalance\r\n","import React from 'react'\r\nimport { Flex, Text } from '@sphynxswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\r\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\r\n\r\nconst RecentCakeProfitCountdownRow = () => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    pricePerFullShare,\r\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\r\n  } = useCakeVault()\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\r\n    account,\r\n    cakeAtLastUserAction,\r\n    userShares,\r\n    pricePerFullShare,\r\n    cakePriceBusd.toNumber(),\r\n  )\r\n\r\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\r\n  const dateTimeLastAction = new Date(lastActionInMs)\r\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n      <Text fontSize=\"14px\">{`${t('Recent SPHYNX profit')}:`}</Text>\r\n      {hasAutoEarnings && (\r\n        <RecentCakeProfitBalance\r\n          cakeToDisplay={autoCakeToDisplay}\r\n          dollarValueToDisplay={autoUsdToDisplay}\r\n          dateStringToDisplay={dateStringToDisplay}\r\n        />\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default RecentCakeProfitCountdownRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, CardBody, Flex, Text } from '@sphynxswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport tokens from 'config/constants/tokens'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { Pool } from 'state/types'\r\nimport AprRow from '../PoolCard/AprRow'\r\nimport { StyledCard } from '../PoolCard/StyledCard'\r\nimport CardFooter from '../PoolCard/CardFooter'\r\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\r\nimport VaultCardActions from './VaultCardActions'\r\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\r\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\r\n\r\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\r\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n`\r\n\r\ninterface CakeVaultProps {\r\n  pool: Pool\r\n  showStakedOnly: boolean\r\n}\r\n\r\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    userData: { userShares, isLoading: isVaultUserDataLoading },\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n\r\n  const accountHasSharesStaked = userShares && userShares.gt(0)\r\n  const isLoading = !pool.userData || isVaultUserDataLoading\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n  if (showStakedOnly && !accountHasSharesStaked) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <StyledCard isActive>\r\n      <StyledCardHeader\r\n        isStaking={accountHasSharesStaked}\r\n        isAutoVault\r\n        earningToken={tokens.sphynx}\r\n        stakingToken={tokens.sphynx}\r\n      />\r\n      <StyledCardBody isLoading={isLoading}>\r\n        <AprRow pool={pool} performanceFee={performanceFeeAsDecimal} />\r\n        <Box mt=\"24px\">\r\n          <RecentCakeProfitRow />\r\n        </Box>\r\n        <Box mt=\"8px\">\r\n          <UnstakingFeeCountdownRow />\r\n        </Box>\r\n        <Flex mt=\"32px\" flexDirection=\"column\">\r\n          {account ? (\r\n            <VaultCardActions pool={pool} accountHasSharesStaked={accountHasSharesStaked} isLoading={isLoading} />\r\n          ) : (\r\n            <>\r\n              <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\r\n                {t('Start earning')}\r\n              </Text>\r\n              <ConnectWalletButton />\r\n            </>\r\n          )}\r\n        </Flex>\r\n      </StyledCardBody>\r\n      <CardFooter pool={pool} account={account} />\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default CakeVaultCard\r\n","import React from 'react'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { ButtonMenu, ButtonMenuItem, Toggle, Text, NotificationDot } from '@sphynxswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ToggleView, { ViewMode } from './ToggleView/ToggleView'\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n\r\nconst PoolTabButtons = ({ stakedOnly, setStakedOnly, hasStakeInFinishedPools, viewMode, setViewMode }) => {\r\n  const { url } = useRouteMatch()\r\n  const { t } = useTranslation()\r\n\r\n  const viewModeToggle = <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n\r\n  const liveOrFinishedSwitch = (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={url === '/pools' ? 0 : 1} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to=\"/pools\">\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedPools}>\r\n          <ButtonMenuItem as={Link} to=\"/pools/history\">\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n\r\n  const stakedOnlySwitch = (\r\n    <ToggleWrapper>\r\n      <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n      <Text> {t('Staked only')}</Text>\r\n    </ToggleWrapper>\r\n  )\r\n\r\n  return (\r\n    <ViewControls>\r\n      {viewModeToggle}\r\n      {stakedOnlySwitch}\r\n      {liveOrFinishedSwitch}\r\n    </ViewControls>\r\n  )\r\n}\r\n\r\nexport default PoolTabButtons\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Flex, Button, HelpIcon, AutoRenewIcon, useTooltip } from '@sphynxswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useCakeVaultContract } from 'hooks/useContract'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport Balance from 'components/Balance'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\n\r\ninterface BountyModalProps {\r\n  onDismiss?: () => void\r\n  TooltipComponent: React.ElementType\r\n}\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\r\n  height: 1px;\r\n  margin: 16px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst BountyModal: React.FC<BountyModalProps> = ({ onDismiss, TooltipComponent }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { theme } = useTheme()\r\n  const { toastError, toastSuccess } = useToast()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const {\r\n    estimatedCakeBountyReward,\r\n    totalPendingCakeHarvest,\r\n    fees: { callFee },\r\n  } = useCakeVault()\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const callFeeAsDecimal = callFee / 100\r\n  const totalYieldToDisplay = getBalanceNumber(totalPendingCakeHarvest, 18)\r\n\r\n  const estimatedDollarBountyReward = useMemo(() => {\r\n    return new BigNumber(estimatedCakeBountyReward).multipliedBy(cakePriceBusd)\r\n  }, [cakePriceBusd, estimatedCakeBountyReward])\r\n\r\n  const hasFetchedDollarBounty = estimatedDollarBountyReward.gte(0)\r\n  const hasFetchedCakeBounty = estimatedCakeBountyReward ? estimatedCakeBountyReward.gte(0) : false\r\n  const dollarBountyToDisplay = hasFetchedDollarBounty ? getBalanceNumber(estimatedDollarBountyReward, 18) : 0\r\n  const cakeBountyToDisplay = hasFetchedCakeBounty ? getBalanceNumber(estimatedCakeBountyReward, 18) : 0\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent fee={callFee} />, {\r\n    placement: 'bottom',\r\n    tooltipPadding: { right: 15 },\r\n  })\r\n\r\n  const handleConfirmClick = async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      const tx = await cakeVaultContract.harvest({ gasLimit: 300000 })\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        toastSuccess(t('Bounty collected!'), t('SPHYNX bounty has been sent to your wallet.'))\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      }\r\n    } catch (error) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Claim Bounty')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      {tooltipVisible && tooltip}\r\n      <Flex alignItems=\"flex-start\" justifyContent=\"space-between\">\r\n        <Text>{t('You’ll claim')}</Text>\r\n        <Flex flexDirection=\"column\">\r\n          <Balance bold value={cakeBountyToDisplay} decimals={7} unit=\" SPHYNX\" />\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            <Balance\r\n              fontSize=\"12px\"\r\n              color=\"textSubtle\"\r\n              value={dollarBountyToDisplay}\r\n              decimals={2}\r\n              unit=\" USD\"\r\n              prefix=\"~\"\r\n            />\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text fontSize=\"14px\" color=\"textSubtle\">\r\n          {t('Pool total pending yield')}\r\n        </Text>\r\n        <Balance color=\"textSubtle\" value={totalYieldToDisplay} unit=\" SPHYNX\" />\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\r\n        <Text fontSize=\"14px\" color=\"textSubtle\">\r\n          {t('Bounty')}\r\n        </Text>\r\n        <Text fontSize=\"14px\" color=\"textSubtle\">\r\n          {callFeeAsDecimal}%\r\n        </Text>\r\n      </Flex>\r\n      {account ? (\r\n        <Button\r\n          isLoading={pendingTx}\r\n          disabled={!dollarBountyToDisplay || !cakeBountyToDisplay || !callFee}\r\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          onClick={handleConfirmClick}\r\n          mb=\"28px\"\r\n          id=\"autoCakeConfirmBounty\"\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      ) : (\r\n        <ConnectWalletButton mb=\"28px\" />\r\n      )}\r\n      <Flex justifyContent=\"center\" alignItems=\"center\">\r\n        <Text fontSize=\"16px\" bold color=\"textSubtle\" mr=\"4px\">\r\n          {t('What’s this?')}\r\n        </Text>\r\n        <span ref={targetRef}>\r\n          <HelpIcon color=\"textSubtle\" />\r\n        </span>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default BountyModal\r\n","import React, { useMemo } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Text,\r\n  Flex,\r\n  HelpIcon,\r\n  Button,\r\n  Heading,\r\n  Skeleton,\r\n  useModal,\r\n  Box,\r\n  useTooltip,\r\n} from '@sphynxswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport Balance from 'components/Balance'\r\nimport BountyModal from './BountyModal'\r\n\r\nconst StyledCard = styled(Card)`\r\n  width: 100%;\r\n  flex: 1;\r\n  background: transparent;\r\n\r\n  & > div > div {\r\n    padding: 24px 0;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 240px;\r\n  }\r\n`\r\n\r\nconst BountyCard = () => {\r\n  const { t } = useTranslation()\r\n  const {\r\n    estimatedCakeBountyReward,\r\n    fees: { callFee },\r\n  } = useCakeVault()\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n\r\n  const estimatedDollarBountyReward = useMemo(() => {\r\n    return new BigNumber(estimatedCakeBountyReward).multipliedBy(cakePriceBusd)\r\n  }, [cakePriceBusd, estimatedCakeBountyReward])\r\n\r\n  const hasFetchedDollarBounty = estimatedDollarBountyReward.gte(0)\r\n  const hasFetchedCakeBounty = estimatedCakeBountyReward ? estimatedCakeBountyReward.gte(0) : false\r\n  const dollarBountyToDisplay = hasFetchedDollarBounty ? getBalanceNumber(estimatedDollarBountyReward, 18) : 0\r\n  const cakeBountyToDisplay = hasFetchedCakeBounty ? getBalanceNumber(estimatedCakeBountyReward, 18) : 0\r\n\r\n  const TooltipComponent = ({ fee }: { fee: number }) => (\r\n    <>\r\n      <Text mb=\"16px\">{t('This bounty is given as a reward for providing a service to other users.')}</Text>\r\n      <Text mb=\"16px\">\r\n        {t(\r\n          'Whenever you successfully claim the bounty, you’re also helping out by activating the Auto SPHYNX Pool’s compounding function for everyone.',\r\n        )}\r\n      </Text>\r\n      <Text style={{ fontWeight: 'bold' }}>\r\n        {t('Auto-Compound Bounty: %fee%% of all Auto SPHYNX pool users pending yield', { fee: fee / 100 })}\r\n      </Text>\r\n    </>\r\n  )\r\n\r\n  const [onPresentBountyModal] = useModal(<BountyModal TooltipComponent={TooltipComponent} />)\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent fee={callFee} />, {\r\n    placement: 'bottom-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <>\r\n      {tooltipVisible && tooltip}\r\n      <StyledCard background=\"transparent\">\r\n        <CardBody>\r\n          <Flex flexDirection=\"column\">\r\n            <Flex alignItems=\"center\" mb=\"12px\">\r\n              <Text fontSize=\"16px\" bold color=\"textSubtle\" mr=\"4px\">\r\n                {t('Auto SPHYNX Bounty')}\r\n              </Text>\r\n              <Box ref={targetRef}>\r\n                <HelpIcon color=\"textSubtle\" />\r\n              </Box>\r\n            </Flex>\r\n          </Flex>\r\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n            <Flex flexDirection=\"column\" mr=\"12px\">\r\n              <Heading>\r\n                {hasFetchedCakeBounty ? (\r\n                  <Balance fontSize=\"20px\" bold value={cakeBountyToDisplay} decimals={3} />\r\n                ) : (\r\n                  <Skeleton height={20} width={96} mb=\"2px\" />\r\n                )}\r\n              </Heading>\r\n              {hasFetchedDollarBounty ? (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  value={dollarBountyToDisplay}\r\n                  decimals={2}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              ) : (\r\n                <Skeleton height={16} width={62} />\r\n              )}\r\n            </Flex>\r\n            <Button\r\n              variant=\"primary\"\r\n              disabled={!dollarBountyToDisplay || !cakeBountyToDisplay || !callFee}\r\n              onClick={onPresentBountyModal}\r\n              scale=\"sm\"\r\n              id=\"clickClaimVaultBounty\"\r\n            >\r\n              {t('Claim')}\r\n            </Button>\r\n          </Flex>\r\n        </CardBody>\r\n      </StyledCard>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BountyCard\r\n","import { Flex, Text } from '@sphynxswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst BaseCell = styled.div`\r\n  color: black;\r\n\r\n  padding: 24px 8px;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n`\r\n\r\nexport const CellContent = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  max-height: 40px;\r\n  ${Text} {\r\n    line-height: 1;\r\n  }\r\n`\r\n\r\nexport default BaseCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Text, useMatchBreakpoints } from '@sphynxswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { Pool } from 'state/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\nimport CakeVaultTokenPairImage from '../../CakeVaultCard/CakeVaultTokenPairImage'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface NameCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 5;\r\n  flex-direction: row;\r\n  padding-left: 12px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex: 1 0 150px;\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst NameCell: React.FC<NameCellProps> = ({ pool }) => {\r\n  const { t } = useTranslation()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { sousId, stakingToken, earningToken, userData, isFinished, isAutoVault } = pool\r\n  const {\r\n    userData: { userShares },\r\n  } = useCakeVault()\r\n  const hasVaultShares = userShares && userShares.gt(0)\r\n\r\n  const stakingTokenSymbol = stakingToken.symbol\r\n  const earningTokenSymbol = earningToken.symbol\r\n\r\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n  const isStaked = stakedBalance.gt(0)\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const showStakedTag = isAutoVault ? hasVaultShares : isStaked\r\n\r\n  let title = `${t('Earn')} ${earningTokenSymbol}`\r\n  let subtitle = `${t('Stake')} ${stakingTokenSymbol}`\r\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isXs && !isSm)\r\n\r\n  if (isAutoVault) {\r\n    title = t('Auto SPHYNX')\r\n    subtitle = t('Automatic restaking')\r\n  } else if (isManualCakePool) {\r\n    title = t('Manual SPHYNX')\r\n    subtitle = `${t('Earn')} SPHYNX ${t('Stake').toLocaleLowerCase()} SPHYNX`\r\n  }\r\n\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      {isAutoVault ? (\r\n        <CakeVaultTokenPairImage mr=\"8px\" width={40} height={40} />\r\n      ) : (\r\n        <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} mr=\"8px\" width={40} height={40} />\r\n      )}\r\n      <CellContent>\r\n        {showStakedTag && (\r\n          <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\r\n            {t('Staked')}\r\n          </Text>\r\n        )}\r\n        <Text bold={!isXs && !isSm} small={isXs || isSm}>\r\n          {title}\r\n        </Text>\r\n        {showSubtitle && (\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {subtitle}\r\n          </Text>\r\n        )}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default NameCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useModal, useMatchBreakpoints } from '@sphynxswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Balance from 'components/Balance'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\r\n\r\ninterface EarningsCellProps {\r\n  pool: Pool\r\n  account: string\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 4.5;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex: 1 0 120px;\r\n  }\r\n`\r\n\r\nconst HelpIconWrapper = styled.div`\r\n  align-self: center;\r\n`\r\n\r\nconst EarningsCell: React.FC<EarningsCellProps> = ({ pool, account, userDataLoaded }) => {\r\n  const { t } = useTranslation()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { sousId, earningToken, poolCategory, userData, earningTokenPrice, isAutoVault } = pool\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\r\n  // These will be reassigned later if its Auto SPHYNX vault\r\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\r\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\r\n  let hasEarnings = account && earnings.gt(0)\r\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\r\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n\r\n  // Auto SPHYNX vault calculations\r\n  const {\r\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\r\n    account,\r\n    cakeAtLastUserAction,\r\n    userShares,\r\n    pricePerFullShare,\r\n    earningTokenPrice,\r\n  )\r\n\r\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\r\n  const dateTimeLastAction = new Date(lastActionInMs)\r\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\r\n\r\n  const labelText = isAutoVault ? t('Recent SPHYNX profit') : t('%asset% Earned', { asset: earningToken.symbol })\r\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\r\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\r\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Balance fontSize=\"16px\" value={autoCakeToDisplay} decimals={3} bold unit=\" SPHYNX\" />\r\n      <Balance fontSize=\"16px\" value={autoUsdToDisplay} decimals={2} bold prefix=\"~$\" />\r\n      {t('Earned since your last action')}\r\n      <Text>{dateStringToDisplay}</Text>\r\n    </>,\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const [onPresentCollect] = useModal(\r\n    <CollectModal\r\n      formattedBalance={formattedBalance}\r\n      fullBalance={fullBalance}\r\n      earningToken={earningToken}\r\n      earningsDollarValue={earningTokenDollarBalance}\r\n      sousId={sousId}\r\n      isBnbPool={isBnbPool}\r\n      isCompoundPool={isManualCakePool}\r\n    />,\r\n  )\r\n\r\n  const handleEarningsClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    event.stopPropagation()\r\n    onPresentCollect()\r\n  }\r\n\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {labelText}\r\n        </Text>\r\n        {!userDataLoaded && account ? (\r\n          <Skeleton width=\"80px\" height=\"16px\" />\r\n        ) : (\r\n          <>\r\n            {tooltipVisible && tooltip}\r\n            <Flex>\r\n              <Box mr=\"8px\" height=\"32px\" onClick={!isAutoVault && hasEarnings ? handleEarningsClick : undefined}>\r\n                <Balance\r\n                  mt=\"4px\"\r\n                  bold={!isXs && !isSm}\r\n                  fontSize={isXs || isSm ? '14px' : '16px'}\r\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\r\n                  decimals={hasEarnings ? 5 : 1}\r\n                  value={hasEarnings ? earningTokenBalance : 0}\r\n                />\r\n                {hasEarnings ? (\r\n                  <>\r\n                    {earningTokenPrice > 0 && (\r\n                      <Balance\r\n                        display=\"inline\"\r\n                        fontSize=\"12px\"\r\n                        color=\"textSubtle\"\r\n                        decimals={2}\r\n                        prefix=\"~\"\r\n                        value={earningTokenDollarBalance}\r\n                        unit=\" USD\"\r\n                      />\r\n                    )}\r\n                  </>\r\n                ) : (\r\n                  <Text mt=\"4px\" fontSize=\"12px\" color=\"textDisabled\">\r\n                    0 USD\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n              {isAutoVault && hasEarnings && !isXs && !isSm && (\r\n                <HelpIconWrapper ref={targetRef}>\r\n                  <HelpIcon color=\"textSubtle\" />\r\n                </HelpIconWrapper>\r\n              )}\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default EarningsCell\r\n","import React from 'react'\r\nimport { Flex, useModal, CalculateIcon, Skeleton, FlexProps, Button } from '@sphynxswap/uikit'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport Balance from 'components/Balance'\r\nimport { Pool } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getAprData } from 'views/Pools/helpers'\r\n\r\ninterface AprProps extends FlexProps {\r\n  pool: Pool\r\n  showIcon: boolean\r\n  performanceFee?: number\r\n}\r\n\r\nconst Apr: React.FC<AprProps> = ({ pool, showIcon, performanceFee = 0, ...props }) => {\r\n  const { stakingToken, earningToken, isFinished, earningTokenPrice, apr } = pool\r\n  const { t } = useTranslation()\r\n\r\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\r\n\r\n  const apyModalLink = '/swap'\r\n\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      tokenPrice={earningTokenPrice}\r\n      apr={apr}\r\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n      linkHref={apyModalLink}\r\n      earningTokenSymbol={earningToken.symbol}\r\n      roundingDecimals={roundingDecimals}\r\n      compoundFrequency={compoundFrequency}\r\n      performanceFee={performanceFee}\r\n    />,\r\n  )\r\n\r\n  const openRoiModal = (event: React.MouseEvent<HTMLElement>) => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\r\n      {earningsPercentageToDisplay || isFinished ? (\r\n        <>\r\n          <Balance\r\n            onClick={openRoiModal}\r\n            fontSize=\"16px\"\r\n            isDisabled={isFinished}\r\n            value={isFinished ? 0 : earningsPercentageToDisplay}\r\n            decimals={2}\r\n            unit=\"%\"\r\n          />\r\n          {!isFinished && showIcon && (\r\n            <Button onClick={openRoiModal} variant=\"text\" width=\"20px\" height=\"20px\" padding=\"0px\" marginLeft=\"4px\">\r\n              <CalculateIcon color=\"textSubtle\" width=\"20px\" />\r\n            </Button>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <Skeleton width=\"80px\" height=\"16px\" />\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, useMatchBreakpoints } from '@sphynxswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\nimport Apr from '../Apr'\r\n\r\ninterface AprCellProps {\r\n  pool: Pool\r\n  performanceFee: number\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 1 0 50px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex: 0 0 120px;\r\n  }\r\n`\r\n\r\nconst AprCell: React.FC<AprCellProps> = ({ pool, performanceFee }) => {\r\n  const { t } = useTranslation()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { isAutoVault } = pool\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {isAutoVault ? t('APY') : t('APR')}\r\n        </Text>\r\n        <Apr pool={pool} performanceFee={isAutoVault ? performanceFee : 0} showIcon={!isXs && !isSm} />\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default AprCell\r\n","import React, { useMemo } from 'react'\r\nimport { Flex, Skeleton, Text } from '@sphynxswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\nimport Balance from 'components/Balance'\r\nimport { Pool } from 'state/types'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface TotalStakedCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 2 0 100px;\r\n`\r\n\r\nconst TotalStakedCell: React.FC<TotalStakedCellProps> = ({ pool }) => {\r\n  const { t } = useTranslation()\r\n  const { sousId, stakingToken, totalStaked, isAutoVault } = pool\r\n  const { totalCakeInVault } = useCakeVault()\r\n\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const totalStakedBalance = useMemo(() => {\r\n    if (isAutoVault) {\r\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\r\n    }\r\n    if (isManualCakePool) {\r\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\r\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\r\n    }\r\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\r\n  }, [isAutoVault, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals])\r\n\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {t('Total staked')}\r\n        </Text>\r\n        {totalStaked && totalStaked.gte(0) ? (\r\n          <Flex mt=\"4px\" alignItems=\"center\">\r\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\r\n          </Flex>\r\n        ) : (\r\n          <Skeleton width=\"80px\" height=\"16px\" />\r\n        )}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default TotalStakedCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@sphynxswap/uikit'\r\nimport { getBscScanLink } from 'utils'\r\nimport { Pool } from 'state/types'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface FinishCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 2 0 100px;\r\n`\r\n\r\nconst EndsInCell: React.FC<FinishCellProps> = ({ pool }) => {\r\n  const { sousId, totalStaked, startBlock, endBlock, isFinished } = pool\r\n  const { currentBlock } = useBlock()\r\n  const { t } = useTranslation()\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const isCakePool = sousId === 0\r\n\r\n  const renderBlocks = shouldShowBlockCountdown ? (\r\n    <Flex alignItems=\"center\">\r\n      <Flex flex=\"1.3\">\r\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\r\n        <Text ml=\"4px\" textTransform=\"lowercase\">\r\n          {t('Blocks')}\r\n        </Text>\r\n      </Flex>\r\n      <Flex flex=\"1\">\r\n        <Link\r\n          external\r\n          href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}\r\n          onClick={(e) => e.stopPropagation()}\r\n        >\r\n          <TimerIcon ml=\"4px\" />\r\n        </Link>\r\n      </Flex>\r\n    </Flex>\r\n  ) : (\r\n    <Text>-</Text>\r\n  )\r\n\r\n  // A bit hacky way to determine if public data is loading relying on totalStaked\r\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\r\n  // anywhere else\r\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || (!blocksRemaining && !blocksUntilStart)\r\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\r\n        </Text>\r\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default EndsInCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, ChevronDownIcon } from '@sphynxswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BaseCell from './BaseCell'\r\n\r\ninterface ExpandActionCellProps {\r\n  expanded: boolean\r\n  isFullLayout: boolean\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex-direction: row;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  flex: 1;\r\n  padding-right: 12px;\r\n  padding-left: 0px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex: 0 0 120px;\r\n    padding-right: 32px;\r\n    padding-left: 8px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 24px;\r\n`\r\n\r\nconst TotalStakedCell: React.FC<ExpandActionCellProps> = ({ expanded, isFullLayout }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      {isFullLayout && (\r\n        <Text color=\"white\" bold>\r\n          {expanded ? t('Hide') : t('Details')}\r\n        </Text>\r\n      )}\r\n      <ArrowIcon color=\"white\" toggled={expanded} />\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default TotalStakedCell\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    height: 130px;\r\n    max-height: 130px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 32px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    height: 130px;\r\n    max-height: 130px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n","import React from 'react'\r\nimport { Button, Text, useModal, Flex, TooltipText, useTooltip, Skeleton, Heading } from '@sphynxswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { Pool } from 'state/types'\r\n\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\r\nimport UnstakingFeeCountdownRow from '../../CakeVaultCard/UnstakingFeeCountdownRow'\r\n\r\ninterface HarvestActionProps extends Pool {\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({\r\n  sousId,\r\n  poolCategory,\r\n  earningToken,\r\n  userData,\r\n  userDataLoaded,\r\n  isAutoVault,\r\n  earningTokenPrice,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n\r\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\r\n  // These will be reassigned later if its Auto SPHYNX vault\r\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\r\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\r\n  let hasEarnings = earnings.gt(0)\r\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\r\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\r\n  const isCompoundPool = sousId === 0\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n\r\n  // Auto SPHYNX vault calculations\r\n  const {\r\n    userData: { cakeAtLastUserAction, userShares },\r\n    pricePerFullShare,\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\r\n    account,\r\n    cakeAtLastUserAction,\r\n    userShares,\r\n    pricePerFullShare,\r\n    earningTokenPrice,\r\n  )\r\n\r\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\r\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\r\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\r\n\r\n  const [onPresentCollect] = useModal(\r\n    <CollectModal\r\n      formattedBalance={formattedBalance}\r\n      fullBalance={fullBalance}\r\n      earningToken={earningToken}\r\n      earningsDollarValue={earningTokenDollarBalance}\r\n      sousId={sousId}\r\n      isBnbPool={isBnbPool}\r\n      isCompoundPool={isCompoundPool}\r\n    />,\r\n  )\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Subtracted automatically from each yield harvest and burned.'),\r\n    { placement: 'bottom-start' },\r\n  )\r\n\r\n  const actionTitle = isAutoVault ? (\r\n    <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\r\n      {t('Recent SPHYNX profit')}\r\n    </Text>\r\n  ) : (\r\n    <>\r\n      <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\r\n        {earningToken.symbol}{' '}\r\n      </Text>\r\n      <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n        {t('Earned')}\r\n      </Text>\r\n    </>\r\n  )\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>{actionTitle}</ActionTitles>\r\n        <ActionContent>\r\n          <Heading>0</Heading>\r\n          <Button disabled>{isCompoundPool ? t('Collect') : t('Harvest')}</Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataLoaded) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>{actionTitle}</ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>{actionTitle}</ActionTitles>\r\n      <ActionContent>\r\n        <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\r\n          <>\r\n            {hasEarnings ? (\r\n              <>\r\n                <Balance lineHeight=\"1\" bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\r\n                {earningTokenPrice > 0 && (\r\n                  <Balance\r\n                    display=\"inline\"\r\n                    fontSize=\"12px\"\r\n                    color=\"textSubtle\"\r\n                    decimals={2}\r\n                    prefix=\"~\"\r\n                    value={earningTokenDollarBalance}\r\n                    unit=\" USD\"\r\n                  />\r\n                )}\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Heading color=\"textDisabled\">0</Heading>\r\n                <Text fontSize=\"12px\" color=\"textDisabled\">\r\n                  0 USD\r\n                </Text>\r\n              </>\r\n            )}\r\n          </>\r\n        </Flex>\r\n        {isAutoVault ? (\r\n          <Flex flex=\"1.3\" flexDirection=\"column\" alignSelf=\"flex-start\" alignItems=\"flex-start\">\r\n            <UnstakingFeeCountdownRow isTableVariant />\r\n            <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n              {tooltipVisible && tooltip}\r\n              <TooltipText ref={targetRef} small>\r\n                {t('Performance Fee')}\r\n              </TooltipText>\r\n              <Flex alignItems=\"center\">\r\n                <Text ml=\"4px\" small>\r\n                  {performanceFee / 100}%\r\n                </Text>\r\n              </Flex>\r\n            </Flex>\r\n          </Flex>\r\n        ) : (\r\n          <Button disabled={!hasEarnings} onClick={onPresentCollect}>\r\n            {isCompoundPool ? t('Collect') : t('Harvest')}\r\n          </Button>\r\n        )}\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, useTooltip, Flex, Text } from '@sphynxswap/uikit'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { Pool } from 'state/types'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { convertSharesToCake } from 'views/Pools/helpers'\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\r\nimport StakeModal from '../../PoolCard/Modals/StakeModal'\r\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal'\r\nimport { useCheckVaultApprovalStatus, useApprovePool, useVaultApprove } from '../../../hooks/useApprove'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps {\r\n  pool: Pool\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({ pool, userDataLoaded }) => {\r\n  const {\r\n    sousId,\r\n    stakingToken,\r\n    earningToken,\r\n    stakingLimit,\r\n    isFinished,\r\n    poolCategory,\r\n    userData,\r\n    stakingTokenPrice,\r\n    isAutoVault,\r\n  } = pool\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n\r\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\r\n  const { handleApprove: handlePoolApprove, requestedApproval: requestedPoolApproval } = useApprovePool(\r\n    stakingTokenContract,\r\n    sousId,\r\n    earningToken.symbol,\r\n  )\r\n\r\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\r\n  const { handleApprove: handleVaultApprove, requestedApproval: requestedVaultApproval } =\r\n    useVaultApprove(setLastUpdated)\r\n\r\n  const handleApprove = isAutoVault ? handleVaultApprove : handlePoolApprove\r\n  const requestedApproval = isAutoVault ? requestedVaultApproval : requestedPoolApproval\r\n\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\r\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n  const isNotVaultAndHasStake = !isAutoVault && stakedBalance.gt(0)\r\n\r\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n\r\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\r\n  const stakedTokenDollarBalance = getBalanceNumber(\r\n    stakedBalance.multipliedBy(stakingTokenPrice),\r\n    stakingToken.decimals,\r\n  )\r\n\r\n  const {\r\n    userData: { userShares },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n\r\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\r\n  const hasSharesStaked = userShares && userShares.gt(0)\r\n  const isVaultWithShares = isAutoVault && hasSharesStaked\r\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\r\n\r\n  const needsApproval = isAutoVault ? !isVaultApproved : !allowance.gt(0) && !isBnbPool\r\n\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n\r\n  const [onPresentStake] = useModal(\r\n    <StakeModal\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n    />,\r\n  )\r\n\r\n  const [onPresentVaultStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\r\n\r\n  const [onPresentUnstake] = useModal(\r\n    <StakeModal\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n      isRemovingStake\r\n    />,\r\n  )\r\n\r\n  const [onPresentVaultUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\r\n\r\n  const onStake = () => {\r\n    if (isAutoVault) {\r\n      onPresentVaultStake()\r\n    } else {\r\n      onPresentStake()\r\n    }\r\n  }\r\n\r\n  const onUnstake = () => {\r\n    if (isAutoVault) {\r\n      onPresentVaultUnstake()\r\n    } else {\r\n      onPresentUnstake()\r\n    }\r\n  }\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t(\"You've already staked the maximum amount you can stake in this pool!\"),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {t('Start staking')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <ConnectWalletButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataLoaded) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {t('Start staking')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (needsApproval) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {t('Enable pool')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n            {t('Enable')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  // Wallet connected, user data loaded and approved\r\n  if (isNotVaultAndHasStake || isVaultWithShares) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\r\n            {stakingToken.symbol}{' '}\r\n          </Text>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {isAutoVault ? t('Staked (compounding)') : t('Staked')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\r\n            <Balance\r\n              lineHeight=\"1\"\r\n              bold\r\n              fontSize=\"20px\"\r\n              decimals={5}\r\n              value={isAutoVault ? cakeAsNumberBalance : stakedTokenBalance}\r\n            />\r\n            <Balance\r\n              fontSize=\"12px\"\r\n              display=\"inline\"\r\n              color=\"textSubtle\"\r\n              decimals={2}\r\n              value={isAutoVault ? stakedAutoDollarValue : stakedTokenDollarBalance}\r\n              unit=\" USD\"\r\n              prefix=\"~\"\r\n            />\r\n          </Flex>\r\n          <IconButtonWrapper>\r\n            <IconButton variant=\"secondary\" onClick={onUnstake} mr=\"6px\">\r\n              <MinusIcon color=\"primary\" width=\"14px\" />\r\n            </IconButton>\r\n            {reachStakingLimit ? (\r\n              <span ref={targetRef}>\r\n                <IconButton variant=\"secondary\" disabled>\r\n                  <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\r\n                </IconButton>\r\n              </span>\r\n            ) : (\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\r\n                disabled={isFinished}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            )}\r\n          </IconButtonWrapper>\r\n          {tooltipVisible && tooltip}\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\r\n          {t('Stake')}{' '}\r\n        </Text>\r\n        <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n          {stakingToken.symbol}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button\r\n          width=\"100%\"\r\n          onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\r\n          variant=\"secondary\"\r\n          disabled={isFinished}\r\n        >\r\n          {t('Stake')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React, { useCallback } from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  HelpIcon,\r\n  Link,\r\n  LinkExternal,\r\n  MetamaskIcon,\r\n  Skeleton,\r\n  Text,\r\n  TimerIcon,\r\n  useTooltip,\r\n} from '@sphynxswap/uikit'\r\nimport { BASE_BSC_SCAN_URL } from 'config'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Pool } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\r\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\r\nimport { registerToken } from 'utils/wallet'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\nimport Harvest from './Harvest'\r\nimport Stake from './Stake'\r\nimport Apr from '../Apr'\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 700px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 700px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  display: flex;\r\n  flex-direction: column-reverse;\r\n  justify-content: center;\r\n  padding: 12px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\ntype MediaBreakpoints = {\r\n  isXs: boolean\r\n  isSm: boolean\r\n  isMd: boolean\r\n  isLg: boolean\r\n  isXl: boolean\r\n}\r\n\r\ninterface ActionPanelProps {\r\n  account: string\r\n  pool: Pool\r\n  userDataLoaded: boolean\r\n  expanded: boolean\r\n  breakpoints: MediaBreakpoints\r\n}\r\n\r\nconst InfoSection = styled(Box)`\r\n  flex-grow: 0;\r\n  flex-shrink: 0;\r\n  flex-basis: auto;\r\n  padding: 8px 8px;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding: 0;\r\n    flex-basis: 230px;\r\n  }\r\n`\r\n\r\nconst ActionPanel: React.FC<ActionPanelProps> = ({ account, pool, userDataLoaded, expanded, breakpoints }) => {\r\n  const {\r\n    sousId,\r\n    stakingToken,\r\n    earningToken,\r\n    totalStaked,\r\n    startBlock,\r\n    endBlock,\r\n    stakingLimit,\r\n    contractAddress,\r\n    isAutoVault,\r\n  } = pool\r\n  const { t } = useTranslation()\r\n  const poolContractAddress = getAddress(contractAddress)\r\n  const cakeVaultContractAddress = getCakeVaultAddress()\r\n  const { currentBlock } = useBlock()\r\n  const { isXs, isSm, isMd } = breakpoints\r\n  const showSubtitle = (isXs || isSm) && sousId === 0\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const isMetaMaskInScope = !!window.ethereum?.isMetaMask\r\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\r\n\r\n  const {\r\n    totalCakeInVault,\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const getTotalStakedBalance = () => {\r\n    if (isAutoVault) {\r\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\r\n    }\r\n    if (isManualCakePool) {\r\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\r\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\r\n    }\r\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\r\n  }\r\n\r\n  const {\r\n    targetRef: totalStakedTargetRef,\r\n    tooltip: totalStakedTooltip,\r\n    tooltipVisible: totalStakedTooltipVisible,\r\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\r\n  const autoTooltipText = t(\r\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\r\n  )\r\n\r\n  const {\r\n    targetRef: tagTargetRef,\r\n    tooltip: tagTooltip,\r\n    tooltipVisible: tagTooltipVisible,\r\n  } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\r\n    placement: 'bottom-start',\r\n  })\r\n\r\n  const maxStakeRow = stakingLimit.gt(0) ? (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\">\r\n      <Text>{t('Max. stake per user')}:</Text>\r\n      <Text>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\r\n    </Flex>\r\n  ) : null\r\n\r\n  const blocksRow =\r\n    blocksRemaining || blocksUntilStart ? (\r\n      <Flex mb=\"8px\" justifyContent=\"space-between\">\r\n        <Text>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\r\n        <Flex>\r\n          <Link external href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}>\r\n            <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} color=\"primary\" />\r\n            <Text ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\r\n              {t('Blocks')}\r\n            </Text>\r\n            <TimerIcon ml=\"4px\" color=\"primary\" />\r\n          </Link>\r\n        </Flex>\r\n      </Flex>\r\n    ) : (\r\n      <Skeleton width=\"56px\" height=\"16px\" />\r\n    )\r\n\r\n  const aprRow = (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\r\n      <Text>{isAutoVault ? t('APY') : t('APR')}:</Text>\r\n      <Apr pool={pool} showIcon performanceFee={isAutoVault ? performanceFeeAsDecimal : 0} />\r\n    </Flex>\r\n  )\r\n\r\n  const totalStakedRow = (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\r\n      <Text maxWidth={['50px', '100%']}>{t('Total staked')}:</Text>\r\n      <Flex alignItems=\"center\">\r\n        {totalStaked && totalStaked.gte(0) ? (\r\n          <>\r\n            <Balance fontSize=\"16px\" value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\r\n            <span ref={totalStakedTargetRef}>\r\n              <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"4px\" />\r\n            </span>\r\n          </>\r\n        ) : (\r\n          <Skeleton width=\"56px\" height=\"16px\" />\r\n        )}\r\n        {totalStakedTooltipVisible && totalStakedTooltip}\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n\r\n  const handleRegisterToken = useCallback(() => {\r\n    registerToken(tokenAddress, earningToken.symbol, earningToken.decimals)\r\n  }, [earningToken, tokenAddress])\r\n\r\n  return (\r\n    <StyledActionPanel expanded={expanded}>\r\n      <InfoSection>\r\n        {maxStakeRow}\r\n        {(isXs || isSm) && aprRow}\r\n        {(isXs || isSm || isMd) && totalStakedRow}\r\n        {shouldShowBlockCountdown && blocksRow}\r\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n          <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false}>\r\n            {t('See Token Info')}\r\n          </LinkExternal>\r\n        </Flex>\r\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n          <LinkExternal href={earningToken.projectLink} bold={false}>\r\n            {t('View Project Site')}\r\n          </LinkExternal>\r\n        </Flex>\r\n        {poolContractAddress && (\r\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n            <LinkExternal\r\n              href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\r\n              bold={false}\r\n            >\r\n              {t('View Contract')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        )}\r\n        {account && isMetaMaskInScope && tokenAddress && (\r\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n            <Button\r\n              variant=\"text\"\r\n              p=\"0\"\r\n              height=\"auto\"\r\n              onClick={handleRegisterToken}\r\n            >\r\n              <Text color=\"primary\">{t('Add to Metamask')}</Text>\r\n              <MetamaskIcon ml=\"4px\" />\r\n            </Button>\r\n          </Flex>\r\n        )}\r\n        {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\r\n        {tagTooltipVisible && tagTooltip}\r\n        <span ref={tagTargetRef}>\r\n          <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\r\n        </span>\r\n      </InfoSection>\r\n      <ActionContainer>\r\n        {showSubtitle && (\r\n          <Text mt=\"4px\" mb=\"16px\" color=\"textSubtle\">\r\n            {isAutoVault ? t('Automatic restaking') : `${t('Earn')} SPHYNX ${t('Stake').toLocaleLowerCase()} SPHYNX`}\r\n          </Text>\r\n        )}\r\n        <Harvest {...pool} userDataLoaded={userDataLoaded} />\r\n        <Stake pool={pool} userDataLoaded={userDataLoaded} />\r\n      </ActionContainer>\r\n    </StyledActionPanel>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useMatchBreakpoints } from '@sphynxswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport NameCell from './Cells/NameCell'\r\nimport EarningsCell from './Cells/EarningsCell'\r\nimport AprCell from './Cells/AprCell'\r\nimport TotalStakedCell from './Cells/TotalStakedCell'\r\nimport EndsInCell from './Cells/EndsInCell'\r\nimport ExpandActionCell from './Cells/ExpandActionCell'\r\nimport ActionPanel from './ActionPanel/ActionPanel'\r\n\r\ninterface PoolRowProps {\r\n  pool: Pool\r\n  account: string\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst StyledRow = styled.div`\r\n  background-color: transparent;\r\n  display: flex;\r\n  cursor: pointer;\r\n`\r\n\r\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account, userDataLoaded }) => {\r\n  const { isXs, isSm, isMd, isLg, isXl } = useMatchBreakpoints()\r\n  const [expanded, setExpanded] = useState(false)\r\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\r\n\r\n  const toggleExpanded = () => {\r\n    setExpanded((prev) => !prev)\r\n  }\r\n\r\n  const {\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n  return (\r\n    <>\r\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\r\n        <NameCell pool={pool} />\r\n        <EarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\r\n        <AprCell pool={pool} performanceFee={performanceFeeAsDecimal} />\r\n        {(isLg || isXl) && <TotalStakedCell pool={pool} />}\r\n        {isXl && <EndsInCell pool={pool} />}\r\n        <ExpandActionCell expanded={expanded} isFullLayout={isMd || isLg || isXl} />\r\n      </StyledRow>\r\n      {shouldRenderActionPanel && (\r\n        <ActionPanel\r\n          account={account}\r\n          pool={pool}\r\n          userDataLoaded={userDataLoaded}\r\n          expanded={expanded}\r\n          breakpoints={{ isXs, isSm, isMd, isLg, isXl }}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PoolRow\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, ChevronUpIcon } from '@sphynxswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Pool } from 'state/types'\r\nimport PoolRow from './PoolRow'\r\n\r\ninterface PoolsTableProps {\r\n  pools: Pool[]\r\n  userDataLoaded: boolean\r\n  account: string\r\n}\r\n\r\nconst StyledTable = styled.div`\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  > div:not(:last-child) {\r\n    border-bottom: 2px solid ${({ theme }) => theme.colors.disabled};\r\n  }\r\n`\r\n\r\nconst StyledTableBorder = styled.div`\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  padding: 1px 1px 3px 1px;\r\n  background-size: 400% 400%;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst PoolsTable: React.FC<PoolsTableProps> = ({ pools, userDataLoaded, account }) => {\r\n  const { t } = useTranslation()\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n  return (\r\n    <StyledTableBorder>\r\n      <StyledTable role=\"table\" ref={tableWrapperEl}>\r\n        {pools.map((pool) => (\r\n          <PoolRow\r\n            key={pool.isAutoVault ? 'auto-cake' : pool.sousId}\r\n            pool={pool}\r\n            account={account}\r\n            userDataLoaded={userDataLoaded}\r\n          />\r\n        ))}\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop} style={{ color: 'white' }}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"white\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </StyledTable>\r\n    </StyledTableBorder>\r\n  )\r\n}\r\n\r\nexport default PoolsTable\r\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Heading, Flex, Text } from '@sphynxswap/uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport partition from 'lodash/partition'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { useFetchPublicPoolsData, usePools, useFetchCakeVault, useCakeVault } from 'state/pools/hooks'\r\nimport { usePollFarmsData } from 'state/farms/hooks'\r\nimport { latinise } from 'utils/latinise'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport { Pool } from 'state/types'\r\nimport Loading from 'components/Loading'\r\nimport PoolCard from './components/PoolCard'\r\nimport CakeVaultCard from './components/CakeVaultCard'\r\nimport PoolTabButtons from './components/PoolTabButtons'\r\nimport BountyCard from './components/BountyCard'\r\nimport PoolsTable from './components/PoolsTable/PoolsTable'\r\nimport { ViewMode } from './components/ToggleView/ToggleView'\r\nimport { getAprData, getCakeVaultEarnings } from './helpers'\r\n\r\nconst CardLayout = styled(FlexLayout)`\r\n  justify-content: center;\r\n`\r\n\r\nconst PoolControls = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n\r\n  & > div {\r\n    margin-bottom: 16px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst ControlStretch = styled(Flex)`\r\n  > div {\r\n    flex: 1;\r\n  }\r\n`\r\n\r\nconst NUMBER_OF_POOLS_VISIBLE = 12\r\n\r\nconst Pools: React.FC = () => {\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools(account)\r\n  const [stakedOnly, setStakedOnly] = usePersistState(false, { localStorageKey: 'pancake_pool_staked' })\r\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_pool_view' })\r\n  const [searchQuery, setSearchQuery] = useState('')\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const chosenPoolsLength = useRef(0)\r\n  const {\r\n    userData: { cakeAtLastUserAction, userShares },\r\n    fees: { performanceFee },\r\n    pricePerFullShare,\r\n    totalCakeInVault,\r\n  } = useCakeVault()\r\n  const accountHasVaultShares = userShares && userShares.gt(0)\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n  const pools = useMemo(() => {\r\n    return poolsWithoutAutoVault\r\n  }, [poolsWithoutAutoVault])\r\n\r\n  // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\r\n  const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\r\n  const stakedOnlyFinishedPools = useMemo(\r\n    () =>\r\n      finishedPools.filter((pool) => {\r\n        if (pool.isAutoVault) {\r\n          return accountHasVaultShares\r\n        }\r\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\r\n      }),\r\n    [finishedPools, accountHasVaultShares],\r\n  )\r\n  const stakedOnlyOpenPools = useMemo(\r\n    () =>\r\n      openPools.filter((pool) => {\r\n        if (pool.isAutoVault) {\r\n          return accountHasVaultShares\r\n        }\r\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\r\n      }),\r\n    [openPools, accountHasVaultShares],\r\n  )\r\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\r\n\r\n  usePollFarmsData()\r\n  useFetchCakeVault()\r\n  useFetchPublicPoolsData()\r\n\r\n  useEffect(() => {\r\n    const showMorePools = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfPoolsVisible((poolsCurrentlyVisible) => {\r\n          if (poolsCurrentlyVisible <= chosenPoolsLength.current) {\r\n            return poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE\r\n          }\r\n          return poolsCurrentlyVisible\r\n        })\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [observerIsSet])\r\n\r\n  const showFinishedPools = location.pathname.includes('history')\r\n\r\n  const handleChangeSearchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchQuery(event.target.value)\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  const sortPools = (poolsToSort: Pool[]) => {\r\n    switch (sortOption) {\r\n      case 'apr':\r\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\r\n          'desc',\r\n        )\r\n      case 'earned':\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => {\r\n            if (!pool.userData || !pool.earningTokenPrice) {\r\n              return 0\r\n            }\r\n            return pool.isAutoVault\r\n              ? getCakeVaultEarnings(\r\n                  account,\r\n                  cakeAtLastUserAction,\r\n                  userShares,\r\n                  pricePerFullShare,\r\n                  pool.earningTokenPrice,\r\n                ).autoUsdToDisplay\r\n              : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\r\n          },\r\n          'desc',\r\n        )\r\n      case 'totalStaked':\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => (pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber()),\r\n          'desc',\r\n        )\r\n      default:\r\n        return poolsToSort\r\n    }\r\n  }\r\n\r\n  let chosenPools\r\n  if (showFinishedPools) {\r\n    chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\r\n  } else {\r\n    chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools\r\n  }\r\n\r\n  if (searchQuery) {\r\n    const lowercaseQuery = latinise(searchQuery.toLowerCase())\r\n    chosenPools = chosenPools.filter((pool) =>\r\n      latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery),\r\n    )\r\n  }\r\n\r\n  chosenPools = sortPools(chosenPools).slice(0, numberOfPoolsVisible)\r\n  chosenPoolsLength.current = chosenPools.length\r\n\r\n  const cardLayout = (\r\n    <CardLayout>\r\n      {chosenPools.map((pool) =>\r\n        pool.isAutoVault ? (\r\n          <CakeVaultCard key=\"auto-cake\" pool={pool} showStakedOnly={stakedOnly} />\r\n        ) : (\r\n          <PoolCard key={pool.sousId} pool={pool} account={account} />\r\n        ),\r\n      )}\r\n    </CardLayout>\r\n  )\r\n\r\n  const tableLayout = <PoolsTable pools={chosenPools} account={account} userDataLoaded={userDataLoaded} />\r\n\r\n  return (\r\n    <>\r\n      <div style={{ height: 24 }} />\r\n      <PageHeader>\r\n        <Flex justifyContent=\"space-between\" flexDirection={['column', null, null, 'row']}>\r\n          <Flex flex=\"1\" flexDirection=\"column\" mr={['8px', 0]}>\r\n            <Heading as=\"h1\" scale=\"xxl\" color=\"white\" mb=\"24px\">\r\n              {t('Sphynx Pools')}\r\n            </Heading>\r\n            <Heading scale=\"md\" color=\"text\">\r\n              {t('Just stake some tokens to earn.')}\r\n            </Heading>\r\n            <Heading scale=\"md\" color=\"text\">\r\n              {t('High APR, low risk.')}\r\n            </Heading>\r\n          </Flex>\r\n          <Flex flex=\"1\" height=\"fit-content\" justifyContent=\"center\" alignItems=\"center\" mt={['24px', null, '0']}>\r\n            {/* <HelpButton /> */}\r\n            <BountyCard />\r\n          </Flex>\r\n        </Flex>\r\n      </PageHeader>\r\n      <Page>\r\n        <PoolControls>\r\n          <PoolTabButtons\r\n            stakedOnly={stakedOnly}\r\n            setStakedOnly={setStakedOnly}\r\n            hasStakeInFinishedPools={hasStakeInFinishedPools}\r\n            viewMode={viewMode}\r\n            setViewMode={setViewMode}\r\n          />\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\r\n                {t('Sort by')}\r\n              </Text>\r\n              <ControlStretch>\r\n                <Select\r\n                  options={[\r\n                    {\r\n                      label: t('Hot'),\r\n                      value: 'hot',\r\n                    },\r\n                    {\r\n                      label: t('APR'),\r\n                      value: 'apr',\r\n                    },\r\n                    {\r\n                      label: t('Earned'),\r\n                      value: 'earned',\r\n                    },\r\n                    {\r\n                      label: t('Total staked'),\r\n                      value: 'totalStaked',\r\n                    },\r\n                  ]}\r\n                  onChange={handleSortOptionChange}\r\n                />\r\n              </ControlStretch>\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\r\n                {t('Search')}\r\n              </Text>\r\n              <SearchInput onChange={handleChangeSearchQuery} placeholder=\"Search Pools\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </PoolControls>\r\n        {showFinishedPools && (\r\n          <Text fontSize=\"20px\" color=\"failure\" pb=\"32px\">\r\n            {t('These pools are no longer distributing rewards. Please unstake your tokens.')}\r\n          </Text>\r\n        )}\r\n        {account && !userDataLoaded && stakedOnly && (\r\n          <Flex justifyContent=\"center\" mb=\"4px\">\r\n            <Loading />\r\n          </Flex>\r\n        )}\r\n        {viewMode === ViewMode.CARD ? cardLayout : tableLayout}\r\n        <div ref={loadMoreRef} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Pools\r\n"],"sourceRoot":""}